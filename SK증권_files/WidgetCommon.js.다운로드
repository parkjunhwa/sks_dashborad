const WidgetCommon = {
    methods: {
        changeConfig: (_this, widgetConfig) => {
            if (undefined === widgetConfig) { // 최초 초기화시
                widgetConfig = {};
                if (_this.config.hasOwnProperty("title")) {
                    widgetConfig.TITLE = _this.config.title;
                }
                if (_this.config.hasOwnProperty("color")) {
                    widgetConfig.COLOR = _this.config.color;
                }
                if (_this.config.hasOwnProperty("borderColor")) {
                    widgetConfig.BORDER_COLOR = _this.config.borderColor;
                }
                if (_this.config.hasOwnProperty("borderStyle")) {
                    widgetConfig.BORDER_STYLE = _this.config.borderStyle;
                }
                if (_this.config.hasOwnProperty("borderWeight")) {
                    widgetConfig.BORDER_WEIGHT = _this.config.borderWeight;
                }
                if (_this.config.hasOwnProperty("textColor")) {
                    widgetConfig.TEXT_COLOR = _this.config.textColor;
                }
                if (_this.config.hasOwnProperty("icon")) {
                    widgetConfig.ICON = _this.config.icon;
                }
                if (_this.config.hasOwnProperty("iconSize")) {
                    widgetConfig.ICON_SIZE = _this.config.iconSize;
                }
                if (_this.config.hasOwnProperty("content")) {
                    widgetConfig.CONTENT = _this.config.content;
                }
                if (_this.config.hasOwnProperty("link")) {
                    widgetConfig.LINK = _this.config.link;
                }
            }

            let TODAY = "";

            if (_this.$el.hasField("TODAY")) {
                TODAY = _this.$el.getFieldValue("TODAY");
            }

            if (widgetConfig.hasOwnProperty("TITLE")) {
                _this.$el.scope("TITLE").text(_i18n.t(widgetConfig.TITLE));
                _this.config.title = _i18n.t(widgetConfig.TITLE);
            }
            if (widgetConfig.hasOwnProperty("COLOR")) {
                WidgetCommonConfig.methods.changeBackgroundColor(_this, widgetConfig.COLOR);
                _this.config.color = widgetConfig.COLOR;
            }
            if (widgetConfig.hasOwnProperty("BORDER_COLOR")) {
                WidgetCommonConfig.methods.changeBorderColor(_this, widgetConfig.BORDER_COLOR);
                _this.config.borderColor = widgetConfig.BORDER_COLOR;
            }
            if (widgetConfig.hasOwnProperty("BORDER_STYLE")) {
                _this.$el.scope("BODY").removeClass(_this.config.borderStyle).addClass(widgetConfig.BORDER_STYLE);
                _this.config.borderStyle = widgetConfig.BORDER_STYLE;
            }
            if (widgetConfig.hasOwnProperty("BORDER_WEIGHT")) {
                _this.$el.scope("BODY").removeClass(_this.config.borderWeight).addClass(widgetConfig.BORDER_WEIGHT);
                _this.config.borderWeight = widgetConfig.BORDER_WEIGHT;
            }
            if (widgetConfig.hasOwnProperty("TEXT_COLOR")) {
                WidgetCommonConfig.methods.changeTextColor(_this, widgetConfig.TEXT_COLOR);
                _this.config.textColor = widgetConfig.TEXT_COLOR;
            }
            if (widgetConfig.hasOwnProperty("ICON")) {
                _this.$el.scope("ICON").removeClass(_this.config.icon).addClass(widgetConfig.ICON);
                _this.config.icon = widgetConfig.ICON;
            }
            if (widgetConfig.hasOwnProperty("ICON_SIZE")) {
                _this.$el.scope("ICON").css("font-size", widgetConfig.ICON_SIZE + "rem");
                _this.config.iconSize = widgetConfig.ICON_SIZE;
            }
            if (widgetConfig.hasOwnProperty("CONTENT")) {
                _this.$el.scope("CONTENT").attr("data-content", v.replaceAll(widgetConfig.CONTENT, "#{TODAY}", TODAY)).bindTooltip();
            }
            if (widgetConfig.hasOwnProperty("LINK")) {
                _this.$el.scope("TITLE").attr("data-link", v.replaceAll(widgetConfig.LINK, "#{TODAY}", TODAY));
            }
        },

        /**
         * Panel 사이즈에 따라 Table의 row과 column이 조정 및 이벤트를 추가한다.
         * @param {object} panelScope - Panel Scope (Not Null)
         * @param {array} hideColumns - 숨길 컬럼
         * @param {number} basisWidth - 해당 크기 이하일 경우 컬럼 숨김
         */
        addEventForResize: (panelScope, hideColumns, basisWidth) => {
            const panelWidth = panelScope.width();
            const panelHeight = panelScope.height();

            GridStackScope.methods.resize(panelScope, panelWidth, panelHeight, hideColumns, basisWidth);

            GridStackScope.$el.on("resizestop", (evt, el) => {
                if ($(el.element).data("scope") === panelScope.data("scope")) {
                    GridStackScope.methods.resize(panelScope, el.size.width, el.size.height, hideColumns, basisWidth);
                }
            });
        },
    }
};