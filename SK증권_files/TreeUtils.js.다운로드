/**
 * @file 트리 Utils
 * @author jason, Moon
 * @see https://api.jquery.com/
 * @see https://www.jstree.com/
 * @requires jQuery
 * @requires jQuery.jstree
 * @requires module:_AJAX
 * @module _TREE
 */
"use strict";
(function () {
    if (null == window["jQuery"] || null == window["_AJAX"] || null != window["_TREE"]) return;

    window._TREE = {
        /**
         * @function init
         * @description 지정된 HTMLDivElement 에 대하여 tree 로 설정한다.
         * @example <caption>HTML:</caption>
         * <div id="tree1"></div>
         * @example <caption>JAVAScript:</caption>
         * _TREE.init("tree1");
         * @param {string | object} options HTMLDivElement 의 id 속성값 또는 JSON 타입의 부가 정보
         * @param {jQuery} options.target HTMLDivElement 의 jQuery 객체
         * @param {boolean} [options.multiple=false] 복수 선택 가능 여부
         * @param {boolean} [options.showCheckboxes] checkbox 표시 여부
         * @param {function} [options.config.refresh] jstree 의 refresh.jstree event listner 함수, ex.) function (event, jstree) {}
         * @param {function} [options.config.deselected] jstree 의 deselect_node.jstree 및 deselect_all.jstree event listner 함수
         * @param {function} [options.config.selected] jstree 의 select_node.jstree event listner 함수
         * @param {function} [options.config.model] jstree 의 model.jstree event listner 함수
         * @listens refresh.jstree
         * @listens deselect_node.jstree
         * @listens deselect_all.jstree
         * @listens select_node.jstree
         * @listens model.jstree
         */
        init: function (options) {
            if (typeof options.target === "string") {
                options.target = $("#" + target);
            }

            // "contextmenu", "dnd", "search"
            var plugins = ["state", "types", "wholerow"];

            if (options.showCheckboxes) {
                plugins.push("checkbox");
            }

            options.target
                .jstree({
                    "core": {
                        "animation": 0,
                        "check_callback": true,
                        "themes": {
                            "stripes": true
                        },
                        "cache": false,
                        "data": [],
                        "multiple": (options.multiple ? options.multiple : false)
                    },
                    "checkbox": {
                        "undetermined": false,
                        "tie_selection": true // selected === checked
                    },
                    "types": {
                        "#": {
                            "max_children": 1,
                            "max_depth": 4,
                            "valid_children": ["root"]
                        },
                        "root": {
                            "icon": "/static/3.3.7/assets/images/tree_icon.png",
                            "valid_children": ["default"]
                        },
                        "default": {
                            "valid_children": ["default", "file"]
                        },
                        "file": {
                            "icon": "glyphicon glyphicon-file",
                            "valid_children": []
                        }
                    },
                    "plugins": plugins
                });

            if (options.config && options.config.refresh) {
                options.target.on("refresh.jstree", options.config.refresh);
            }

            if (options.config && options.config.deselected) {
                options.target.on("deselect_node.jstree", options.config.deselected);
                options.target.on("deselect_all.jstree", options.config.deselected);
            }

            if (options.config && options.config.selected) {
                options.target.on("select_node.jstree", options.config.selected);
            }

            if (options.config && options.config.model) {
                options.target.on("model.jstree", options.config.model);
            }

            if (options.config && options.config.refresh) {
                options.target.on("refresh.jstree", options.config.refresh);
            } else {
                options.target.on("refresh.jstree", function (evt, jstree) {
                    if (options.showCheckboxes) {
                        var flatNodeList = jstree.instance.get_json("#", {flat: true});

                        $.each(flatNodeList, function (i, e) {
                            if (e.li_attr.checked) {
                                jstree.instance.check_node(e.id);
                            } else {
                                jstree.instance.uncheck_node(e.id);
                            }
                        });
                    }
                });
            }
        },

        /**
         * @function addLiAttr
         * @description 배열내 JSON 객체에 대하여 tree 에서 사용하는 checked 속성 등을 추가한다.
         * @example <caption>HTML:</caption>
         * <div id="tree1"></div>
         * @example <caption>JAVAScript:</caption>
         * var response = [
         *     {"id": "ajson1", "parent": "#", "text": "Simple root node", "icon": "fal fa-folder mr-1", "item1": "item11"},
         *     {"id": "ajson2", "parent": "#", "text": "Root node 2", "item1": "item21"},
         *     {"id": "ajson3", "parent": "ajson2", "text": "Child 1", "icon": "fal fa-file-alt mr-1", "item1": "item31"},\
         *     {"id": "ajson4", "parent": "ajson2", "text": "Child 2", "item1": "item41"},
         *     {"id": "ajson5", "parent": "ajson4", "text": "Child 21", "item1": "item51"}
         * ];
         * _TREE.init("tree1");
         * _TREE.addLiAttr(response);
         * _TREE.getTree($("#tree1")).settings.core.data = response; // $("#tree1").jstree(false).settings.core.data = response; 와 동일
         * $("#tree1").jstree(true).refresh();
         */
        addLiAttr: function (node) {
            $.each(node, function (i, e) {
                e.li_attr = {"checked": e.checked};

                if (e.children !== null) {
                    _TREE.addLiAttr(e.children);
                }
            })
        },

        /**
         * @function getTree
         * @description tree API 를 포함하는 jQuery 객체를 가져온다.
         * @example <caption>HTML:</caption>
         * <div id="tree1"></div>
         * @example <caption>JAVAScript:</caption>
         * var response = [
         *     {"id": "ajson1", "parent": "#", "text": "Simple root node", "icon": "fal fa-folder mr-1", "item1": "item11"},
         *     {"id": "ajson2", "parent": "#", "text": "Root node 2", "item1": "item21"},
         *     {"id": "ajson3", "parent": "ajson2", "text": "Child 1", "icon": "fal fa-file-alt mr-1", "item1": "item31"},\
         *     {"id": "ajson4", "parent": "ajson2", "text": "Child 2", "item1": "item41"},
         *     {"id": "ajson5", "parent": "ajson4", "text": "Child 21", "item1": "item51"}
         * ];
         * _TREE.init("tree1");
         * _TREE.addLiAttr(response);
         * _TREE.getTree($("#tree1")).settings.core.data = response; // $("#tree1").jstree(false).settings.core.data = response; 와 동일
         * $("#tree1").jstree(true).refresh();
         * @param {jQuery} $el tree 로 설정된 HTMLDivElement 를 포함하는 jQuery 객체
         * @returns {jQuery} tree API 를 포함하는 jQuery 객체
         */
        getTree: function ($el) {
            return $el.jstree(false);
        },

        /**
         * @function reload
         * @description GET 방식의 비동기 요청 결과로 reload 한다.
         * @example <caption>HTML:</caption>
         * <div id="tree1"></div>
         * @example <caption>JAVAScript:</caption>
         * _TREE.reload({
         *     url: "/test",
         *     parameters: {key1: "value1", key1: "value2"}
         * }, function (response) {
         *     console.log("success");
         * });
         * @param {object} options JSON 타입의 부가 정보
         * @param {jQuery} options.target tree 로 설정된 HTMLElement 를 포함하는 jQuery 객체
         * @param {string} options.url 비동기 HTTP 요청 주소
         * @param {object} [options.parameters] 비동기 HTTP 요청시 보낼 JSON 타입의 데이터
         * @param {function} callBackFunc 응답 성공시 호출될 callback 함수, ex.) function (response) {}
         */
        reload: function (options, callBackFunc) {
            _AJAX.get({
                url: options.url,
                data: options.parameters,
                success: function (response) {
                    _TREE.addLiAttr(response);

                    if (callBackFunc) {
                        callBackFunc.call(null, response);
                    }

                    options.target
                        .jstree(false).settings.core.data = response;

                    options.target.jstree(true).refresh();
                }
            });
        },

        resetLazy: function (node) {
            node.resetLazy();
        },

        isSelected: function (treeId, level) {

            if (!level) level = 1;

            var node = this.getSelectedNode(treeId);

            return (node != null) && (node.getLevel() == level);
        },

        /**
         * @function getSelectedNode
         * @description tree 내 선택된 항목을 가져온다.
         * @example <caption>HTML:</caption>
         * <div id="tree1"></div>
         * @example <caption>JAVAScript:</caption>
         * var response = [
         *     {"id": "ajson1", "parent": "#", "text": "Simple root node", "icon": "fal fa-folder mr-1", "item1": "item11"},
         *     {"id": "ajson2", "parent": "#", "text": "Root node 2", "item1": "item21"},
         *     {"id": "ajson3", "parent": "ajson2", "text": "Child 1", "icon": "fal fa-file-alt mr-1", "item1": "item31"},\
         *     {"id": "ajson4", "parent": "ajson2", "text": "Child 2", "item1": "item41"},
         *     {"id": "ajson5", "parent": "ajson4", "text": "Child 21", "item1": "item51"}
         * ];
         * _TREE.init("tree1");
         * _TREE.addLiAttr(response);
         * _TREE.getTree($("#tree1")).settings.core.data = response; // $("#tree1").jstree(false).settings.core.data = response; 와 동일
         * $("#tree1").jstree(true).refresh();
         * console.log("selected: " + JSON.stringify(_TREE.getTree($("#tree1")).select_node("ajson1")));
         * @returns {boolean | {} | array} 여러 항목 선택시 배열로 return, 하나의 항목 선택시 JSON 타입의 객체로 return, 선택된 항목이 존재하지 않으면 false 를 return
         */
        getSelectedNode: function (target) {
            target = target.find("[data-role=tree]");

            var selectedNode = target.jstree("get_selected", true);

            if (selectedNode.length === 1) {
                return selectedNode[0];
            } else if (selectedNode.length > 1) {
                return selectedNode;
            } else {
                return false;
            }
        },

        getSelectedNodeKey: function (tree) {
            return this.getSelectedNode(tree).key;
        }
    };

})();