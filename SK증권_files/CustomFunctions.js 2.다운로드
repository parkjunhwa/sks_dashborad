/**
 * @file 솔루피아 jQuery 정의 함수
 * @author jason, Moon.
 * @see https://api.jquery.com/
 * @requires jQuery
 * @module jQuery.extension
 */

/**
 * @function assertOne
 * @description jQuery 객체내 포함된 HTMLElement 의 갯수가 1개가 아니면 오류를 발생한다.
 * @example <caption>HTML:</caption>
 * <input type="radio" name="radio1" />
 * <input type="radio" name="radio1" />
 * @example <caption>JAVAScript:</caption>
 * try {
 *     $("[name=radio1]").assertOne();
 * } catch (e) {
 *     console.log("This is displayed!");
 *     console.error(e);
 * }
 * @param {string} [targetName] 디버그 log 로 출력될 명칭
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @throws {Error} 대상 엘리먼트가 1개 이상 발견되었습니다
 */
$.fn.assertOne = function (targetName) {
    if (this.length === 0) {
        if (targetName)
            log.debug("targetName => " + targetName);

        throw new Error(_i18n.t("대상 엘리먼트를 찾지 못했습니다."));
    } else if (this.length > 1) {
        if (targetName)
            log.debug("targetName => " + targetName);

        throw new Error(_i18n.t("대상 엘리먼트가 1개 이상 발견되었습니다."));
    }
};

/**
 * @function assertOneMore
 * @description jQuery 객체내 포함된 HTMLElement 의 갯수가 0 이면 오류를 발생한다.
 * @example <caption>HTML:</caption>
 * <input type="radio" name="radio1" />
 * @example <caption>JAVAScript:</caption>
 * try {
 *     $("[name=radio2]").assertOneMore();
 * } catch (e) {
 *     console.log("This is displayed!");
 *     console.error(e);
 * }
 * @param {string} [targetName] 디버그 log 로 출력될 명칭
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 */
$.fn.assertOneMore = function (targetName) {
    if (this.length === 0) {
        if (targetName)
            log.debug("targetName => " + targetName);

        throw new Error(_i18n.t("대상 엘리먼트를 찾지 못했습니다."));
    }
};

/**
 * @function scope
 * @description data-scope 데이터 속성값이 일치하는 HTMLElement 를 검색한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div id="parent1" data-scope="parent">
 *     <div id="child1" data-scope="child"></div>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * var $child1 = $.scope("parent.child");
 * var $child11 = $.scope("parent").scope("child");
 * console.log("id(maybe child1): " + $child1.attr("id"));
 * console.log("id(maybe child1): " + $child11.attr("id"));
 * @param {string} [scopeNames] 검색할 data-scope 데이터 속성값과 구분자 . 이 포함된 표현식, ex.) "parent.child"
 * @returns {jQuery} 검색된 HTMLElement 또는 HTMLDocument 가 포함된 jQuery 객체
 */
$.scope = function (scopeNames/* , assert */) {
    var target = $(document);

    if (scopeNames !== undefined) {
        var scopeNamesArray = scopeNames.split(".");

        var length = scopeNamesArray.length;

        if (length > 1) {
            for (var i in scopeNamesArray) {
                target = target.scope(scopeNamesArray[i]/* , assert */);
            }
        } else {
            target = target.scope(scopeNames/* , assert */)
        }
    }

    return target;
};
$.fn.scope = function (scopeNames/* , assert */) {
    var target = $(this);

    if (scopeNames !== undefined) {
        var scopeNamesArray = scopeNames.split(".");

        var length = scopeNamesArray.length;

        if (length > 1) {
            // for (var i in scopeNamesArray) {
            //     target = target.scope(scopeNamesArray[i]/* , assert */);
            // }
            $.each(scopeNamesArray, function (i, scopeName) {
                target = target.scope(scopeName);
            });
        } else {
            target = target.find("[data-scope=" + scopeNames + "]");
        }
    } else {
        throw new Error(_i18n.t("필수값이 전달되지 않았습니다. scopeNames"));
    }

    return target;
};

/**
 * @function getField
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 를 검색한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" id="text11" data-field="text1" value="value1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * var $text1 = $.getField("text1");
 * var $text11 = $.scope("scope1").getField("text1");
 * var $text111 = $.scope("scope1").getField("text1", "value1");
 * console.log("id(maybe text11): " + $text1.attr("id"));
 * console.log("id(maybe text11): " + $text11.attr("id"));
 * console.log("id(maybe text11): " + $text111.attr("id"));
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @param {string | number} [value] 입력시 value 속성값도 일치하는 HTMLElement 를 검색, 참고) 문자열로 변환하여 검색한다.
 * @returns {jQuery} 검색된 HTMLElement 가 포함된 jQuery 객체
 */
$.getField = function (fieldName, value) {
    return $(document).getField(fieldName, value);
}
$.fn.getField = function (fieldName, value) {
    var _this = this;

    if (value !== undefined) {
        if (value === "") value = "''";

        return _this.find("[data-field=" + fieldName + "][value=" + value + "]");
    } else {
        return _this.find("[data-field=" + fieldName + "]");
    }
};

/**
 * @function parentScope
 * @description data-scope 데이터 속성값이 일치하는 상위 HTMLElement 를 검색한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="parent1" id="parent11">
 *     <div data-scope="child1" id="child11"></div>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * var $parent1 = $.scope("child1").parentScope("parent1");
 * console.log("id(maybe parent11): " + $parent1.attr("id"));
 * @param {string} scopeName 검색할 data-scope 데이터 속성값
 * @param {boolean} [assert] jQuery 객체내 포함된 HTMLElement 의 갯수가 0 이면 오류를 발생하지만, false 입력시 오류가 발생하지 않는다.
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @returns {jQuery} 검색된 HTMLElement 가 포함된 jQuery 객체
 */
$.fn.parentScope = function (scopeName, assert) {
    var _this = this;

    var scope = _this.closest("[data-scope=" + scopeName + "]");

    if (assert !== false) {
        scope.assertOneMore(scopeName);
    }

    return scope;
};

/**
 * @function hideScope
 * @description 검색된 HTMLElement 를 숨김 처리한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1"></div>
 * @example <caption>JAVAScript:</caption>
 * var $scope1 = $(document).hideScope("scope1");
 * @param {string} scopeName 검색할 data-scope 데이터 속성값
 * @param {boolean} [assert] jQuery 객체내 포함된 HTMLElement 의 갯수가 0 이면 오류를 발생하지만, false 입력시 오류가 발생하지 않는다.
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @returns {jQuery} 검색된 HTMLElement 가 포함된 jQuery 객체
 */
$.fn.hideScope = function (scopeName, assert) {
    var _this = this;

    var scope = _this.find("[data-scope=" + scopeName + "]");

    if (assert !== false) {
        scope.assertOneMore(scopeName);
    }

    scope.hide();

    return scope;
};

/**
 * @function showScope
 * @description 검색된 HTMLElement 를 숨김해제한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1"></div>
 * @example <caption>JAVAScript:</caption>
 * var $scope1 = $(document).hideScope("scope1");
 * var $scope11 = $(document).showScope("scope1");
 * @param {string} scopeName 검색할 data-scope 데이터 속성값
 * @param {boolean} [assert] jQuery 객체내 포함된 HTMLElement 의 갯수가 0 이면 오류를 발생하지만, false 입력시 오류가 발생하지 않는다.
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @returns {jQuery} 검색된 HTMLElement 가 포함된 jQuery 객체
 */
$.fn.showScope = function (scopeName, assert) {
    var _this = this;

    var scope = _this.find("[data-scope=" + scopeName + "]");

    if (assert !== false) {
        scope.assertOneMore(scopeName);
    }

    scope.show();

    return scope;
};

/**
 * @function hasScope
 * @description data-scope 데이터 속성값이 일치하는 HTMLElement 존재하는지, 그 여부를 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <div data-scope="scope2"></div>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * if ($.hasScope("scope1")) console.log("1: This is displayed!");
 * if ($.scope("scope1").hasScope("scope2")) console.log("2: This is displayed!");
 * @param {string} scopeName 검색할 data-scope 데이터 속성값
 * @returns {boolean} 존재 여부
 */
$.hasScope = function (scopeName) {
    var _this = $(document);

    var scope = _this.find("[data-scope=" + scopeName + "]");

    return scope.length > 0;
}
$.fn.hasScope = function (scopeName) {
    var _this = this;

    var scope = _this.find("[data-scope=" + scopeName + "]");

    return scope.length > 0;
};

// 하위 엘리먼트 중 data-template="templateName" 을 가지고 있는 엘리먼트를 리턴한다.
/**
 * @function template
 * @see https://handlebarsjs.com/
 * @description Handlebars template 함수를 생성한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-template 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <table>
 *         <script data-template=SCOPE.RESULT_BODY type="text/x-handlebars-template">
 *             {{#each this}}
 *                 <tr>
 *                     <td>{{column1}}</td>
 *                 </tr>
 *             {{else}}
 *                 <tr>
 *                     <td th:text="#{데이터가 존재하지 않습니다.}"></td>
 *                 </tr>
 *             {{/each}}
 *         </script>
 *         <tbody data-scope=SCOPE.RESULT_BODY></tbody>
 *     </table>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * var template = $.scope("scope1").template(SCOPE.RESULT_BODY);
 * $.scope(SCOPE.RESULT_BODY).html(template([{column1: "value1"}, {column1: "value2"}]));
 * @param {string} templateName 검색할 data-template 데이터 속성값
 * @param {number} [targetIndex=0] 검색된 HTMLElement 배열의 index
 * @requires Handlebars
 * @returns {function} Handlebars template 함수, 참고) function (arrayOrJson) {}
 */
$.fn.template = function (templateName, targetIndex) {
    var _this = this;

    if (targetIndex === undefined) targetIndex = 0;

    var source = _this.find("[data-template=" + templateName + "]");

    // source.assertOne(templateName);

    return Handlebars.compile(source.eq(targetIndex).html());
};

/**
 * @function hasTemplate
 * @description data-template 데이터 속성값이 일치하는 HTMLElement 존재하는지, 그 여부를 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-template 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-template="template1">
 *     <div data-template="template1"></div>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * if ($.hasTemplate("template1")) console.log("1: This is displayed!");
 * if ($.scope("scope1").hasTemplate("template1")) console.log("2: This is displayed!");
 * @param {string} templateName 검색할 data-template 데이터 속성값
 * @returns {boolean} 존재 여부
 */
$.hasTemplate = function (templateName) {
    const _this = $(document);

    const template = _this.find("[data-template=" + templateName + "]");

    return template.length > 0;
};
$.fn.hasTemplate = function (templateName) {
    const _this = this;

    const template = _this.find("[data-template=" + templateName + "]");

    return template.length > 0;
}

// 하위 엘리먼트 중 동일 값을 가지는 엘리먼트를 체크하거나, 해당 엘리먼트에 이벤트를 등록한다.
/**
 * @function check
 * @see http://icheck.fronteed.com/
 * @description iCheck 객체를 선택/해제하거나, 선택/해제시 호출될 함수를 설정하거나, value 속성값 일치시 선택 처리한다.
 * @example <caption>HTML:</caption>
 * <label><input type="checkbox" id="checkbox1" />Checkbox</label>
 * <label><input type="radio" name="radio1" value="value11" />Radio1</label>
 * <label><input type="radio" name="radio1" value="value12" />Radio2</label>
 * @example <caption>JAVAScript:</caption>
 * $("input[type=checkbox],input[type=radio]").iCheck();
 * $("#checkbox1").check(true); // checkbox 선택
 * $("[name=radio1]").check("value12"); // 두번째 radio 선택
 * $("#checkbox1").check(function () { // 선택/해제시 호출될 함수 설정
 *     console.log("changed");
 * });
 * @param {boolean | function | string | number} value boolean 이면 선택 또는 선택해제 처리, function 이면 선택/해제시 호출될 함수 설정, 그 외 value 속성값 일치시 선택
 * @requires jQuery.iCheck
 * @listens "ifChecked"
 * @listens "ifUnchecked"
 */
$.fn.check = function (value) {
    var _this = this;

    if ("boolean" === typeof value) {
        if (value) {
            _this.iCheck("check");
        } else {
            _this.iCheck("uncheck");
        }
    } else if ("function" === typeof value) {
        $.each(_this, function (i, e) {
            $(e).on("ifChecked", value);
            $(e).on("ifUnchecked", value);
        });
    } else {
        $.each(_this, function (i, e) {
            if ($(e).val().toString() === value.toString()) {
                $(e).prop("checked", true);
                $(e).iCheck("check");
            }
        });
    }
};

/**
 * @function checkFields
 * @description data-field 데이터 속성값이 일치하는 iCheck 객체를 선택/해제하거나, 선택/해제시 호출될 함수를 설정하거나, value 속성값 일치시 선택 처리한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <label><input type="checkbox" data-field="field1" />Checkbox</label>
 *     <label><input type="radio" data-field="field2" value="value11" />Radio1</label>
 *     <label><input type="radio" data-field="field2" value="value12" />Radio2</label>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope").checkFields("field1", true); // checkbox 선택
 * $.scope("scope").checkFields("field2", "value12"); // 두번째 radio 선택
 * $.scope("scope").checkFields("field1", function () {
 *     console.log("changed");
 * });
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @param {boolean | function | string | number} value boolean 이면 선택 또는 선택해제 처리, function 이면 선택/해제시 호출될 함수 설정, 그 외 value 속성값 일치시 선택
 */
$.fn.checkFields = function (fieldName, value) {
    const _target = $(this).getFields(fieldName);

    _target.check(value);
}

/**
 * @function hasField
 * @description data-field 데이터 속성값 및 value 속성값이 일치하는 HTMLElement 존재 여부
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="text1" value="value1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * if ($.scope("scope1").hasField("text1")) console.log("1: This is displayed!");;
 * if ($.scope("scope1").hasField("text1", "value1")) console.log("2: This is displayed!");;
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @param {string} [value] 검색할 value 속성값
 * @returns {boolean} 존재 여부
 */
$.fn.hasField = function (fieldName, value) {
    if (value === undefined) {
        log.debug("value :: " + value);
        return this.find("[data-field=" + fieldName + "]").length > 0;
    } else {
        log.debug("value :: " + value);
        return this.find("[data-field=" + fieldName + "][value=" + value + "]").length > 0;
    }
};

// 필드값을 가지고 있는 {element}를 찾아 리턴한다.
/**
 * @function getFields
 * @description data-field 데이터 속성값 및 value 속성값이 일치하는 HTMLElement 를 검색한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="text1" value="value1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * console.log("total: " + $.scope("scope1").getFields().length);
 * console.log("maybe 1: " + $.scope("scope1").getFields("text1").length);
 * console.log("maybe 1: " + $.scope("scope1").getFields("text1", "value1").length);
 * @param {string} [fieldName] 검색할 data-field 데이터 속성값, 미입력시 data-field 데이터 속성값이 정의된 HTMLElement 검색
 * @param {string} [value] 검색할 value 속성값
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @returns {jQuery} 검색된 HTMLElement 가 포함된 jQuery 객체
 */
$.fn.getFields = function (fieldName, value) {
    var _this = this;

    if (fieldName) {
        // 필드명이 전달되면 해당 필드명의 필드를 리턴한다.
        var target;

        if (value) {
            target = _this.find("[data-field=" + fieldName + "][value=" + value + "]");
        } else {
            target = _this.find("[data-field=" + fieldName + "]");
        }

        target.assertOneMore(fieldName);

        return target;
    } else {
        // 필드명이 전달되지 않으면, 모든 필드를 리턴한다.
        return _this.find("[data-field]");
    }
};

/**
 * @function getFieldValue
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 의 value 속성값을 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="text1" value="value1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * console.log("value(maybe value1): " + $.getFieldValue("text1"));
 * console.log("value(maybe value1): " + $.scope("scope1").getFieldValue("text1"));
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @param {boolean} [assert] jQuery 객체내 포함된 HTMLElement 의 갯수가 1개가 아니면 오류를 발생하지만, false 입력시 오류가 발생하지 않는다.
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @throws {Error} 대상 엘리먼트가 1개 이상 발견되었습니다
 * @returns {string | number} value 속성값 문자열, 숫자로 된 문자열인 경우 숫자 return
 */
$.getFieldValue = function (fieldName, assert) {
    var target = $.scope().getField(fieldName);

    if (assert !== false) {
        target.assertOne(fieldName);
    }

    var OUTPUT;

    if ("SELECT" === target.prop("tagName")) {
        OUTPUT = target.find("option:selected").val();
    } else {
        OUTPUT = target.val();
    }

    log.line();
    log.debug(fieldName + " : " + OUTPUT);
    log.line();

    if (isNaN(OUTPUT) || v.isBlank(OUTPUT)) {
        return OUTPUT;
    } else {
        if (OUTPUT.length === parseInt(OUTPUT).toString().length) {
            return parseInt(OUTPUT);
        } else {
            return OUTPUT;
        }
    }
};
$.fn.getFieldValue = function (fieldName, assert) {
    var _this = this;

    var target = _this.find("[data-field=" + fieldName + "]");

    if (assert !== false) {
        target.assertOne(fieldName);
    }

    var OUTPUT;

    if ("SELECT" === target.prop("tagName")) {
        OUTPUT = target.find("option:selected").val();
    } else if ("PRE" === target.prop("tagName") || "SPAN" === target.prop("tagName") || "CODE" === target.prop("tagName")) {
        OUTPUT = target.text();
    } else {
        OUTPUT = target.val();
    }

    log.line();
    log.debug(fieldName + " : " + OUTPUT);
    log.line();

    if (isNaN(OUTPUT) || v.isBlank(OUTPUT)) {
        return OUTPUT;
    } else {
        if (OUTPUT.length === parseInt(OUTPUT).toString().length) {
            return parseInt(OUTPUT);
        } else {
            return OUTPUT;
        }
    }
};

/**
 * @function getFieldValues
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 의 value 속성값을 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="field1" value="value1" />
 *     <input type="text" data-field="field1" value="2" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * var valueArray = $.scope("scope1").getFieldValues("field1");
 * console.log("values(maybe ['value1', 2]): " + JSON.stringify(valueArray));
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @returns {array} 배열 타입의 value 속성값, 숫자로 된 문자열인 경우 숫자로 변환됨, ex.) ["value1", 2]
 */
$.fn.getFieldValues = function (fieldName) {
    var _this = this;

    var targets = _this.find("[data-field=" + fieldName + "]");

    targets.assertOneMore(fieldName);

    var OUTPUT = [];

    $.each(targets, function (i, e) {
        if (isNaN($(e).val()) || v.isBlank($(e).val())) {
            OUTPUT.push($(e).val());
        } else {
            if ($(e).val().length === parseInt($(e).val()).toString().length) {
                OUTPUT.push(parseInt($(e).val()));
            } else {
                OUTPUT.push($(e).val());
            }
        }
    });

    return OUTPUT;
};

/**
 * @function getFieldText
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 의 text 속성값을 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <div data-field="field1">text1</div>
 *     <select data-field="field2">
 *         <option value="value1">option1</option>
 *         <option value="value2" selected>option2</option>
 *     </select>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * console.log("text(maybe text1): " + $.scope("scope1").getFieldText("field1"));
 * console.log("text(maybe option2): " + $.scope("scope1").getFieldText("field2"));
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @throws {Error} 대상 엘리먼트가 1개 이상 발견되었습니다
 * @returns {string} text 속성값
 */
$.fn.getFieldText = function (fieldName) {
    var _this = this;

    var target = _this.find("[data-field=" + fieldName + "]");

    target.assertOne(fieldName);

    var OUTPUT;

    if (target.prop("tagName") === "SELECT") {
        OUTPUT = target.find("option:selected").text();
    } else {
        OUTPUT = target.text();
    }

    log.line();
    log.debug(fieldName + " : " + OUTPUT);
    log.line();

    return OUTPUT;
};

// 필드값을 가지고 있는 {element}를 찾아 숨긴다.
/**
 * @function hideField
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 를 숨김 처리한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="text1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * var $text1 = $.scope("scope1").hideField("text1");
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @param {boolean} [assert] jQuery 객체내 포함된 HTMLElement 의 갯수가 0 이면 오류를 발생하지만, false 입력시 오류가 발생하지 않는다.
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @returns {jQuery} 검색된 HTMLElement 가 포함된 jQuery 객체
 */
$.fn.hideField = function (fieldName, assert) {
    var _this = this;

    var target = _this.find("[data-field=" + fieldName + "]");

    if (assert !== false) {
        target.assertOneMore(fieldName);
    }

    target.hide();

    return _this;
};

// 필드값을 가지고 있는 {element}를 찾아 숨김 해제한다.
/**
 * @function showField
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 를 숨김 해제한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="text1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").hideField("text1");
 * var $text1 = $.scope("scope1").showField("text1");
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @param {boolean} [assert] jQuery 객체내 포함된 HTMLElement 의 갯수가 0 이면 오류를 발생하지만, false 입력시 오류가 발생하지 않는다.
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @returns {jQuery} 검색된 HTMLElement 가 포함된 jQuery 객체
 */
$.fn.showField = function (fieldName, assert) {
    var _this = this;

    var target = _this.find("[data-field=" + fieldName + "]");

    if (assert !== false) {
        target.assertOneMore(fieldName);
    }

    target.show();

    return _this;
};

// 여러 field 를 숨긴다.
/**
 * @function hideFields
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 를 숨김 처리한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="text1" />
 *     <input type="text" data-field="text2" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope").hideFields(["text1", "text2"]);
 * $.scope("scope").hideFields("text1");
 * @param {array | string} fieldName 검색할 data-field 데이터 속성값, ex.) ["text1", "text2"], "text1"
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @returns {jQuery} 검색된 HTMLElement 가 포함된 jQuery 객체
 */
$.fn.hideFields = function (fieldName) {
    let _this = this;

    let fields;

    if (Array.isArray(fieldName)) {
        $.each(fieldName, function (i, name) {
            $(_this.find("[data-field=" + name + "]")).hide();
        });
    } else {
        fields = this.find("[data-field=" + fieldName + "]");

        fields.assertOneMore(fieldName);

        fields.hide();
    }

    return _this;
};

// 여러 field 를 숨김 해제한다.
/**
 * @function showFields
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 를 숨김 해제한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="text1" />
 *     <input type="text" data-field="text2" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope").hideFields(["text1", "text2"]);
 * $.scope("scope").hideFieldsshowFields(["text1", "text2"]);
 * $.scope("scope").hideFields("text1");
 * $.scope("scope").showFields("text1");
 * @param {array | string} fieldName 검색할 data-field 데이터 속성값, ex.) ["text1", "text2"], "text1"
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @returns {jQuery} 검색된 HTMLElement 가 포함된 jQuery 객체
 */
$.fn.showFields = function (fieldName) {
    let _this = this;

    let fields;

    if (Array.isArray(fieldName)) {
        $.each(fieldName, function (i, name) {
            $(_this.find("[data-field=" + name + "]")).show();
        });
    } else {
        fields = this.find("[data-field=" + fieldName + "]");

        fields.assertOneMore(fieldName);

        fields.show();
    }

    return _this;
};

/**
 * @function focusField
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 에 focus 처리한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="text1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").focusField("text1");
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @throws {Error} 대상 엘리먼트가 1개 이상 발견되었습니다
 * @returns {jQuery} 검색된 HTMLElement 가 포함된 jQuery 객체
 */
$.fn.focusField = function (fieldName) {
    var _this = this;

    var target = _this.find("[data-field=" + fieldName + "]");

    target.assertOne(fieldName)

    target.focus();

    return _this;
};

/**
 * @function maskFields
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 에 mask 를 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="integer1" />
 *     <input type="text" data-field="currency1" />
 *     <input type="text" data-field="currency1" />
 *     <input type="text" data-field="year1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").maskFields("integer1", _MASK.TYPES.INTEGER);
 * $.scope("scope1").maskFields("currency1", _MASK.TYPES.CURRENCY);
 * $.scope("scope1").maskFields("year1", _MASK.TYPES.INTEGER, {"min": 1900, "max": 9999});
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @param {module:_MASK~TYPES} type mask 타입, _MASK.initialize() 함수의 매개변수 maskType 를 참고한다.
 * @param {{}} [options] JSON 타입의 mask 부가 정보, _MASK.initialize() 함수의 매개변수 aOption 을 참고한다.
 * @requires module:_MASK
 */
$.fn.maskFields = function(fieldName, type, options) {
    const _this = this;

    const target = _this.find("[data-field=" + fieldName + "]");

    if (undefined === options) {
        for (let i = 0; i < target.length; i++) {
            _MASK.initialize(target.get(i), type, options);
        }
    } else {
        for (let i = 0; i < target.length; i++) {
            _MASK.initialize(target.get(i), type, options);
        }
    }
};

/**
 * @function getComboText
 * @description HTMLSelectElement 내 선택된 HTMLOptionElement 의 text 속성값을 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <select data-field="combo1">
 *         <option value="value1">option1</option>
 *         <option value="value2" selected>option2</option>
 *     </select>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * console.log("text(maybe option2): " + $.scope("scope1").getComboText("combo1"));
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @throws {Error} 정의되지 않은 엘리먼트Type입니다
 * @returns {string} text 속성값
 */
$.fn.getComboText = function (fieldName) {
    var _this = this;

    var target = _this.find("[data-field=" + fieldName + "]");

    if (target.prop("tagName") !== "SELECT") {
        throw new Error(_i18n.t("정의되지 않은 엘리먼트Type입니다."));
    }

    return target.children("option:selected").text();
};

/**
 * @function setFieldValue
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 의 value 속성값을 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="text1" />
 *     <input type="text" data-field="text2" />
 *     <input type="text" data-field="text2" />
 *     <select data-field="combo1">
 *         <option value="value1">option1</option>
 *         <option value="value2" selected>option2</option>
 *     </select>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").setFieldValue("text1", "value1");
 * $.scope("scope1").setFieldValue("text2", "value2");
 * $.scope("scope1").setFieldValue("combo1", "value1");
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @param {string} value 설정할 value 속성값
 * @fires change
 * @throws {Error} 필수값이 전달되지 않았습니다
 * @returns {jQuery} 검색된 HTMLElement 가 포함된 jQuery 객체
 */
$.fn.setFieldValue = function (fieldName, value) {
    if (v.isBlank(fieldName) || value === undefined) {
        log.debug("Location => ");
        log.debug($(this));
        log.debug("fieldName => " + fieldName);
        log.debug("value => " + value);

        throw new Error(_i18n.t("필수값이 전달되지 않았습니다."));
    }

    var _this = this;

    var target = _this.find("[data-field=" + fieldName + "]");

    $.each(target, function () {
        var _that = this;

        log.debug("_that");
        log.debug(_that);
        log.debug(_that.tagName);
        log.debug(_that.type);

        if (_that.tagName === "INPUT" && (_that.type === "radio" || _that.type === "checkbox")) {
            if (_that.type === "radio") {
                $(_that).val(value).trigger("change");
            } else if (_that.type === "checkbox") {
                $(_that).val(value).trigger("change");
            }
        } else if (_that.tagName === "INPUT" && (_that.type === "text" || _that.type === "hidden" || _that.type === "password")) {
            if ("datepicker" === $(_that).attr("data-field-format") || $(_that).parent().hasClass("input-daterange")) {
                $(_that).datepicker("setDate", value);
            } else {
                $(_that).val(value).trigger("change");
            }
        } else if (_that.tagName === "INPUT" && (_that.type === "number" || _that.type === "tel")) {
            $(_that).val(value).trigger("change");
        } else if (_that.tagName === "SELECT") {
            _SELECT.changeValue($(_that), value);
        } else if (_that.tagName === "TEXTAREA") {
            $(_that).val(value).trigger("change");
        } else {
            throw new Error(_i18n.t("정의되지 않은 엘리먼트Type입니다."));
        }
    }, target);

    return target;
};

/**
 * @function setFieldText
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 의 text 속성값을 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <div data-field="div1"></div>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").setFieldText("div1", "text1");
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @param {string} text 설정할 text 속성값
 */
$.fn.setFieldText = function (fieldName, text) {
    var _this = this;

    var target = _this.find("[data-field=" + fieldName + "]");

    target.text(text);
};

/**
 * @function clearFieldText
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 의 text 속성값을 지운다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <div data-field="div1">text1</div>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").clearFieldText("div1");
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 */
$.fn.clearFieldText = function (fieldName) {
    var _this = this;

    var target = _this.find("[data-field=" + fieldName + "]");

    target.text("");
};

/**
 * @function getFieldParameters
 * @description data-field 데이터 속성값을 정의한 HTMLElement 의 value 속성값을 JSON 타입의 객체로 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="field1" value="value1" />
 *     <input type="text" data-field="field2" value="value2" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * console.log("data(maybe {field1: 'value1', field2: 'value2'}) : " + $.scope("scope1").getFieldParameters());
 * @return {{}} JSON 타입의 객체, 참고) {"(data-field 데이터 속성값)": "(value 속성값)"}
 */
$.fn.getFieldParameters = function () {
    var _this = this;

    var PARAMETERS = {};

    $.each(_this.find("[data-field]"), function (i, e) {
        var _that = this;

        const dataFieldFormat = $(_that).attr("data-field-format");
        if ("daterangepicker" === dataFieldFormat) {
            PARAMETERS[$(e).data("field")] = _DATES.formatting($(_that).data("daterangepicker").startDate);
            PARAMETERS[$(e).data("end-field")] = _DATES.formatting($(_that).data("daterangepicker").endDate);
        } else
        if ("editor" === dataFieldFormat) {
            if ("_EDITOR" in window) {
                PARAMETERS[$(e).data("field")] = _EDITOR.getHtml(e);
            } else {
                PARAMETERS[$(e).data("field")] = null;
            }
        } else
        if (_that.tagName === "INPUT" && (_that.type === "radio" || _that.type === "checkbox")) {
            if (_that.type === "radio") {
                PARAMETERS[$(e).data("field")] = _this.find("input[data-field=" + $(e).data("field") + "]:checked").val();
            } else if (_that.type === "checkbox") {
                PARAMETERS[$(e).data("field")] =
                    // $.map(_this.find("input[data-field=" + $(e).data("field") + "]:checked"), function (element) {
                    //     return this.val();
                    // });
                    $.map(_this.find("input[data-field=" + $(e).data("field") + "]"), (object) => {
                        let valueIfTrue = $(object).attr("data-field-value-if-true");
                        let valueIfFalse = $(object).attr("data-field-value-if-false");
                        if (valueIfTrue === undefined) valueIfTrue = "Y";
                        if (valueIfFalse === undefined) valueIfFalse = "N";
                        return ($(object).prop("checked") ? valueIfTrue : valueIfFalse);
                    })[0];
            }
        }else {
            var value = $(e).val();

            if (v.isBlank(value)) { // 빈문자열은 null로 치환한다.
                value = null;
            }

            PARAMETERS[$(e).data("field")] = value;
        }
    });

    log.line();
    log.debug("REQUEST PARAMETERS Detail =>>");
    log.debug(JSON.stringify(PARAMETERS));
    log.line();

    return PARAMETERS;
};

/*
 * @return {string}
 */
function Josa(txt, josa) {
    var code = txt.charCodeAt(txt.length - 1) - 44032;

    // 원본 문구가 없을때는 빈 문자열 반환
    if (txt.length === 0) return '';

    // 한글이 아닐때
    if (code < 0 || code > 11171) return txt;

    if (code % 28 === 0) return txt + Josa.get(josa, false);
    else return txt + Josa.get(josa, true);
}

Josa.get = function (josa, jong) {
    // jong : true면 받침있음, false면 받침없음

    if (josa === '을' || josa === '를') return (jong ? '을' : '를');
    if (josa === '이' || josa === '가') return (jong ? '이' : '가');
    if (josa === '은' || josa === '는') return (jong ? '은' : '는');
    if (josa === '와' || josa === '과') return (jong ? '와' : '과');

    // 알 수 없는 조사
    return '**';
};

/**
 * @function fieldValidation
 * @description data-field 데이터 속성값이 존재하고 data-required 데이터 속성이 있는 HTMLElement 의 입력값을 검증한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-required 데이터 속성 - 필수 입력 항목을 의미하며, 입력값을 검증하는 대상에 포함됨 -->
 * <!-- data-validation-type 데이터 속성 - 검증 타입을 지정, ex.) "ip", "phone" -->
 * <!-- data-label 데이터 속성 - 입력값 검증시 오류가 있으면 표시되는 메시지에 포함될 명칭, 참고) placeholder 속성값을 우선 사용한다. -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="field1" data-required data-label="필드1" />
 *     <input type="text" data-field="field2" data-validation-type="ip" placeholder="필드2" />
 *     <input type="text" data-field="field3" data-validation-type="phone" data-label="필드3" />
 *     <input type="button" id="button1" value="save" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * button1.addEventListener("click" function () {
 *     if ($.scope("scope1").fieldValidation()) return;
 *     $.ajax({
 *         "url": "/test",
 *         ...
 *     });
 * });
 * @returns {boolean} 정상 여부
 */
$.fn.fieldValidation = function () {
    var _this = this;

    var isValid = true;

    $.each(_this.find("[data-field]"), function () {
        var _that = this;

        var placeHolder = "";

        var label = "";

        var text = "";

        if ($(_that).attr("data-required") === "" && v.isBlank($(_that).val())) {
            placeHolder = $(_that).attr("placeholder");

            label = $(_that).attr("data-label");

            text = v.isBlank(label) ? placeHolder : label;

            if (v.isBlank(text)) {
                _ALERT.error(_i18n.t("필수-값을-입력하세요-"), function () {
                    setTimeout(function () {
                        $(_that).focus();
                    }, 150);
                });
            } else {
                if ($(_that).prop("tagName") === "SELECT") {
                    text = Josa(text, "을") + _i18n.t(" 선택하세요.");
                } else {
                    text = Josa(text, "을") + _i18n.t(" 입력하세요.");
                }

                _ALERT.error(text, function () {
                    setTimeout(function () {
                        $(_that).focus();
                    }, 150);
                });
            }

            isValid = false;

            return false;
        } else if ($(_that).attr("data-required") === "" && $(_that).attr("data-validation-type") === "ip") {
            placeHolder = $(_that).attr("placeholder");

            label = $(_that).attr("data-label");

            text = v.isBlank(label) ? placeHolder : label;

            // var checkIp = /^(1|2)?\d?\d([.](1|2)?\d?\d){3}$/;
            var checkIp = /^([12])?\d?\d([.]([12])?\d?\d){3}$/;

            if (!checkIp.test($(_that).val())) {
                text = "'" + text + _i18n.t("' 형식이 맞지 않습니다.");

                _ALERT.error(text, function () {
                    setTimeout(function () {
                        $(_that).focus();
                    }, 150);
                });

                isValid = false;

                return false;
            }
        } else if ($(_that).attr("data-required") === "" && $(_that).attr("data-validation-type") === "phone") {
            placeHolder = $(_that).attr("placeholder");

            label = $(_that).attr("data-label");

            text = v.isBlank(label) ? placeHolder : label;

            var checkPhoneNumber = /^\d{2,3}-\d{3,4}-\d{4}$/;

            if (!checkPhoneNumber.test($(_that).val())) {
                text = "'" + text + _i18n.t("' 형식이 맞지 않습니다.");

                _ALERT.error(text, function () {
                    setTimeout(function () {
                        $(_that).focus();
                    }, 150);
                });

                isValid = false;

                return false;
            }
        }

    });

    return isValid;
};

/**
 * @function clearField
 * @description data-field 속성값이 일치하는 HTMLElement 의 value 속성값을 지우거나, checked 속성값을 false 로 설정하거나, 첫번쨰 HTMLOptionElement 를 선택한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="checkbox" data-field="checkbox1" checked />
 *     <input type="radio" data-field="radio1" checked />
 *     <input type="radio" data-field="radio1" />
 *     <select data-field="select1">
 *         <option value="value1">Option1</select>
 *         <option value="value2" selected>Option2</select>
 *     <select
 *     <textarea data-field="textarea1">textareaValue1</textarea>
 *     <input type="text" data-field="text1" value="value1" />
 *     <input type="text" data-field="text2" value="value2" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").clearField("checkbox1"); // checkbox 선택해제
 * $.scope("scope1").clearField("radio1"); // radio 선택해제
 * $.scope("scope1").clearField("select1"); // 첫번째 HTMLOptionElement 선택
 * $.scope("scope1").clearField("textarea1"); // value 속성 clear
 * $.scope("scope1").clearField("text1");
 * $.scope("scope1").getField("text2").clearField();
 * @param {string} [fieldName] 검색할 data-field 데이터 속성값
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @throws {Error} 대상 엘리먼트가 1개 이상 발견되었습니다
 * @returns {jQuery} 검색된 HTMLElement 가 포함된 jQuery 객체
 */
$.fn.clearField = function (fieldName) {
    var _this = this;

    if (fieldName) {
        var _that = _this.find("[data-field=" + fieldName + "]");

        _that.assertOne(fieldName);

        if (_that.prop("tagName") === "INPUT") {
            if (_that.prop("type") === "radio") {
                _that.prop("checked", false);
            } else if (_that.prop("type") === "checkbox") {
                _that.prop("checked", false);
            } else {
                if (_that.attr("data-field-format") === "daterangepicker") {
                    _DATERANGEPICKER.clear(_that);
                } else {
                    _that.val("");
                }
            }
        } else if (_that.prop("tagName") === "SELECT") {
            _SELECT.changeAtFirstOption(_that);
        } else if (_that.prop("tagName") === "TEXTAREA") {
            _that.val("");
        }

        return _that;
    } else {
        if (_this.prop("tagName") === "INPUT") {
            if (_this.prop("type") === "radio") {
                _this.prop("checked", false);
            } else if (_this.prop("type") === "checkbox") {
                _this.prop("checked", false);
            } else {
                if (_this.attr("data-field-format") === "daterangepicker") {
                    _DATERANGEPICKER.clear(_this);
                } else {
                    _this.val("");
                }
            }
        } else if (_this.prop("tagName") === "SELECT") {
            _SELECT.changeAtFirstOption(_this);
        } else if (_this.prop("tagName") === "TEXTAREA") {
            _this.val("");
        }

        return _this;
    }
};

/**
 * @function clearFields
 * @description data-field 속성값이 정의된 HTMLElement 의 value 속성값을 지우거나, checked 속성값을 false 로 설정하거나, 첫번쨰 HTMLOptionElement 를 선택한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field-format 데이터 속성 - 입력값의 타입을 설정, ex.) "daterangepicker" -->
 * <div data-scope="scope1">
 *     <input type="text" id="notTarget" value="value0" />
 *     <input type="text" data-field="target1" value="value1" />
 *     <input type="checkbox" data-field="target2" checked />
 *     <select data-field="target3">
 *         <option value="value1">option1</option>
 *         <option value="value2" selected>option2</option>
 *     </select>
 *     <textarea data-field="target4">text4</textarea>
 *     <input type="radio" name="target5" data-field="target5" checked />
 *     <input type="radio" name="target5" data-field="target5" />
 *     <input type="hidden" data-field="target6" value="value6" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").clearfield(false);
 * @param {boolean} [skipHidden] false 입력시 hidden 타입의 HTMLInputElement 에 대하여 value 속성값을 지워준다.
 */
$.fn.clearFields = function (skipHidden) {
    var _this = this;

    $.each(_this.find("[data-field]"), function () {
        var _that = this;

        if (_that.tagName === "INPUT") {
            if (_that.type === "radio") { // 같은 필드값의 가장 첫번째 체크 박스를 체크한다.
                var fieldName = $(_that).attr("data-field");

                _this.getField(fieldName).first().prop("checked", true).iCheck("update");
                _this.getField(fieldName).not(":first").prop("checked", false).iCheck("update");
            } else if (_that.type === "checkbox") {
                $(_that).prop("checked", false).iCheck("update");
            } else if (_that.type === "hidden") {
                if (!skipHidden) {
                    $(_that).val("");
                }
            } else {
                if ($(_that).attr("data-field-format") === "daterangepicker") {
                    _DATERANGEPICKER.clear($(_that));
                } else {
                    $(_that).val("");
                }
            }
        } else if (_that.tagName === "SELECT") {
            _SELECT.changeAtFirstOption($(_that));
        } else if (_that.tagName === "TEXTAREA") {
            $(_that).val("");
        }
    });
};

/**
 * @function fillFields
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 의 value 또는 checked 속성값을 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field-format 데이터 속성 - 입력값의 타입을 설정, ex.) "daterangepicker", "datepicker", "timepicker", "editor", "checkbox", "radio" -->
 * <!-- data-field-value-if-true 데이터 속성 - checkbox 타입의 HTMLInputElement 인 경우 checked 속성값을 true 로 설정할 비교값을 지정, ex.) "YES" -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="key1" />
 *     <select data-field="key2">
 *         <option value="value21">option1</option>
 *         <option value="value22" selected>option2</option>
 *     </select>
 *     <input type="checkbox" data-field="key3" />
 *     <input type="checkbox" data-field="key4" data-field-value-if-true="YES" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").fillFields({
 *     key1: "value1",
 *     key2: "value21",
 *     key3: "Y",
 *     key4: "YES"
 * }, function () {
 *     console.log("callback");
 * });
 * @param {{}} data JSON 타입의 객체, 참고) {"(data-field 데이터 속성값)": "(설정할 값)"}
 * @param {function} [callbackFunc] 후처리 함수
 * @throws change
 */
$.fn.fillFields = function (data, callbackFunc) {
    var _this = this;

    if (!$.isPlainObject(data)) {
        log.line();
        log.debug(data);
        log.debug();
        throw "Function 을 수행할 수 없습니다.";
    }

    $.each(data, function (k, v) {
        log.debug("Key::");
        log.debug(k);
        log.debug("Value::");
        log.debug(v);

        var _that = _this.find("[data-field=" + k + "]");

        if ("daterangepicker" === _that.attr("data-field-format")) {
            var dataEndField = _that.attr("data-end-field");

            if (dataEndField in data) {
                _that.data("daterangepicker").setStartDate(v);
                _that.data("daterangepicker").setEndDate(data[dataEndField]);
            }
        } else
        if ("datepicker" === _that.attr("data-field-format")) {
            _that.datepicker("setDate", v);
        } else if ("timepicker" === _that.attr("data-field-format")) {
            _that.val(v).trigger("change");
        } else if ("editor" === _that.attr("data-field-format")) {
            _EDITOR.setHtml(_that.get(0), v);
        } else if (_that.prop("tagName") === "INPUT" && (_that.prop("type") === "radio" || _that.prop("type") === "checkbox")) {
            $.each(_that, function (i, o) {
                if ($(o).attr("data-field-format") === "checkbox") {
                    let valueIfTrue = $(o).attr("data-field-value-if-true");
                    if (valueIfTrue === undefined) valueIfTrue = "Y";

                    const checked = valueIfTrue === v;
                    if (checked) {
                        $(o).iCheck("check");
                    } else {
                        $(o).iCheck("uncheck");
                    }
                } else if ($(o).attr("data-field-format") === "radio") {
                    const checked = $(o).val() === v;

                    if (checked) {
                        $(o).iCheck("check");
                    } else {
                        $(o).iCheck("uncheck");
                    }
                } else if ($(o).prop("type") === "checkbox") { /* non-iCheck checkbox */
                    let valueIfTrue = $(o).attr("data-field-value-if-true");
                    if (valueIfTrue === undefined) valueIfTrue = "Y";
                    $(o).prop("checked", valueIfTrue === v);
                } else {
                    $(o).prop("checked", $(o).val() === v).trigger("change");
                }
            });
        } else if (_that.prop("tagName") === "SELECT") {
            _SELECT.changeValue(_that, v);
        } else {
            _that.val(v);
        }
    });

    if (undefined !== callbackFunc) {
        callbackFunc();
    }
};

/**
 * @function changeField
 * @description data-field 속성값이 일치하는 HTMLElement 에 대하여 change Event 발생시 호출되는 함수를 설정하거나, change Event 를 발생한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field-format 데이터 속성 - 입력값의 타입을 설정, ex.) "select", "datepicker", "daterangepicker" -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="field1" value="value1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").changeField("field1", function (event) {
 *     console.log("value: " + $(this).val());
 * });
 * $.scope("scope1").getField("field1").val("value12");
 * $.scope("scope1").changeField("field1");
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @param {function} [callBackFunc] change Event 발생시 호출되는 함수, 미입력시 change Event 를 발생, ex.) function (event) {}
 * @param {boolean} [addEvent] true 를 입력하면, change Event 발생시 호출되는 함수를 새로 추가한다.
 * @fires change
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @throws {Error} 대상 엘리먼트가 1개 이상 발견되었습니다
 */
$.fn.changeField = function (fieldName, callBackFunc, addEvent) {
    var $target = this.find("[data-field=" + fieldName + "]");

    $target.assertOne(fieldName);

    if (callBackFunc) {
        if ($target.attr("data-field-format") === "select") {
            _SELECT.change($target, callBackFunc, addEvent);
        } else
        if ($target.attr("data-field-format") === "daterangepicker") {
            _DATERANGEPICKER.change($target, callBackFunc, addEvent);
        } else {
            if (addEvent !== true) {
                // overwrite
                $target.off("change").change(callBackFunc);
            } else {
                $target.change(callBackFunc);
            }
        }
    } else {
        $target.change();
    }
};

/**
 * @function changeFields
 * @description data-field 속성값이 일치하는 HTMLElement 에 대하여 change Event 발생시 호출되는 함수를 설정하거나, change Event 를 발생한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field-format 데이터 속성 - 입력값의 타입을 설정, ex.) "select", "datepicker", "daterangepicker" -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="group1" value="value1" />
 *     <input type="text" data-field="group1" value="value1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").changeFields("group1", function (event) {
 *     console.log("value: " + $(this).val());
 * });
 * $.scope("scope1").find("[data-field=group1]").val("value12");
 * $.scope("scope1").changeFields("group1");
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @param {function} [callBackFunc] 변경 이벤트, 전달되지 않으면 변경 이벤트를 발생시킨다.
 * @param {boolean} [addEvent] true 를 입력하면, change Event 발생시 호출되는 함수를 새로 추가한다.
 * @fires change
 */
$.fn.changeFields = function (fieldName, callBackFunc, addEvent) {
    this.find("[data-field=" + fieldName + "]").each(function (index, element) {
        var $target = $(element);

        if (callBackFunc) {
            if ($target.attr("data-field-format") === "select") {
                _SELECT.change($target, callBackFunc, addEvent);
            } else
            if ($target.attr("data-field-format") === "daterangepicker") {
                _DATERANGEPICKER.change($target, callBackFunc, addEvent);
            } else {
                if (addEvent !== true) {
                    // overwrite
                    $target.off("change").change(callBackFunc);
                } else {
                    $target.change(callBackFunc);
                }
            }
        } else {
            $target.change();
        }
    });
};

/**
 * @function bindCombo
 * @description HTMLSelectElement 내 HTMLOptionElement 를 모두 변경한다. _SELECT.bindOptions() 함수를 참고한다.
 * @example <caption>HTML:</caption>
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <select data-field="select1"></select>
 * @example <caption>JAVAScript:</caption>
 * $.getField("select1").bindCombo([{value: "value1", text: "text1"}, {value: "value2", text: "text2"}]);
 * @param {array} data 배열 타입의 데이터, 참고) [{value: "(value 속성값)", text: "(text 속성값)"}]
 * @param {string} [type="ALL"] 최상단에 추가할 HTMLOptionElement 의 text 속성값, "ALL"/"CHOICE" 입력시 "(전체)"/"(선택)" 입력과 동일
 */
$.fn.bindCombo = function (data, type) {
    _SELECT.bindOptions(this, data, type);
};

/**
 * @function disabled
 * @description HTMLElement 의 비활성 여부를 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <input type="text" data-field="field1" />
 * @example <caption>JAVAScript:</caption>
 * $.getField("field1").disabled(true);
 * @param {boolean} disabled 비활성 여부
 */
$.fn.disabled = function (disabled) {
    if ("SELECT" === this.prop("tagName")) {
        _SELECT.disabled(this, disabled);
    } else {
        this.prop("disabled", disabled);
    }
};

/**
 * @function isDisabled
 * @description HTMLElement 의 비활성 여부를 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <input type="text" data-field="field1" disabled />
 * @example <caption>JAVAScript:</caption>
 * if ($.getField("field1").disabled()) console.log("This is displayed!");
 * @returns {boolean} 비활성 여부
 */
$.fn.isDisabled = function () {
    return this.is(":disabled");
};

/**
 * @function fieldsDisabled
 * @description data-field 데이터 속성값이 정의된 HTMLElement 의 비활성 여부를 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" id="notTarget" disabled />
 *     <input type="text" data-field="target1" disabled />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").fieldsDisabled(false);
 * @param {boolean} [disabled=true] 비활성여부
 */
$.fn.fieldsDisabled = function (disabled) {
    var fields = this.find("[data-field]");

    if (undefined === disabled) disabled = true;

    fields.disabled(disabled);
};

/**
 * @function toggleDisabled
 * @description HTMLElement 의 비활성 여부를 뒤바꾼다.
 * @example <caption>HTML:</caption>
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <input type="text" data-field="field1" disabled />
 * @example <caption>JAVAScript:</caption>
 * $.getField("field1").toggleDisabled();
 */
$.fn.toggleDisabled = function () {
//  chosen -> .select2
    // this.prop("disabled", !this.prop("disabled"));
    //
    // this.trigger("chosen:updated");
    if ("SELECT" === this.prop("tagName")) {
        _SELECT.toggleDisabled(this);
    } else {
        this.prop("disabled", !this.prop("disabled"));
    }
};

/**
 * @function fieldsToggleDisabled
 * @description data-field 데이터 속성값이 정의된 HTMLElement 에 대하여 비활성 여부를 뒤바꾼다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" id="notTarget" disabled />
 *     <input type="text" data-field="target1" disabled />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").fieldsToggleDisabled();
 */
$.fn.fieldsToggleDisabled = function () {
    var targets = this.find("[data-field]");

    $.each(targets, function (i, e) {
        $(e).toggleDisabled();
    });
};

// 버튼 관련 함수..
/**
 * @function hasButton
 * @description data-button 데이터 속성값이 일치하는 HTMLButtonElement 가 존재하는지, 그 여부를 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-button 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="button" id="notTarget" value="Button0" />
 *     <input type="button" data-button="target1" value="Button1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * if ($.scope("scope1").hasButton("target1")) console.log("This is displayed!");
 * @param {string} buttonName 검색할 data-button 데이터 속성값
 * @returns {boolean} 존재 여부
 */
$.fn.hasButton = function (buttonName) {
    var button = this.find("[data-button=" + buttonName + "]");

    return button.length > 0;
};

// this element 하위 자식중 버튼을 찾아 리턴한다.
/**
 * @function getButton
 * @description data-button 데이터 속성값이 일치하는 HTMLButtonElement 를 검색한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-button 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="button" id="notTarget" value="Button0" />
 *     <input type="button" data-button="target1" value="Button1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * var $button1 = $.scope("scope1").getButton("target1");
 * try {
 *     $.scope("scope1").getButton("notTarget");
 * } catch (e) {
 *     console.log("This is displayed!");
 * }
 * @param {string} buttonName 검색할 data-button 데이터 속성값
 * @param {boolean} [assert] true 입력시 jQuery 객체내 포함된 HTMLElement 의 갯수가 1개가 아니면 오류를 발생한다.
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @throws {Error} 대상 엘리먼트가 1개 이상 발견되었습니다
 * @returns {jQuery} 검색된 HTMLButtonElement 가 포함된 jQuery 객체
 */
$.fn.getButton = function (buttonName, assert) {
    var button = this.find("[data-button=" + buttonName + "]");

    if (assert) {
        button.assertOne(buttonName);
    }

    return button;
};


/**
 * @function hideButton
 * @description HTMLButtonElement 를 숨김 처리한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-button 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="button" data-button="target1" value="Button1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").hideButton("target1");
 * @param {string} buttonName 검색할 data-button 데이터 속성값
 * @param {boolean} [assert] true 입력시 jQuery 객체내 포함된 HTMLElement 의 갯수가 1개가 아니면 오류를 발생한다.
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @throws {Error} 대상 엘리먼트가 1개 이상 발견되었습니다
 * @returns {jQuery} 검색된 HTMLButtonElement 가 포함된 jQuery 객체
 */
$.fn.hideButton = function (buttonName, assert) {
    var button = this.find("[data-button=" + buttonName + "]");

    if (assert) {
        button.assertOne(buttonName);
    }

    button.hide();

    return this;
};

/**
 * @function showButton
 * @description data-button 속성값이 일치하는 HTMLButtonElement 을 숨김 해제한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-button 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="button" id="notTarget" value="Button0" />
 *     <input type="button" data-button="target1" value="Button1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").hideButton("target1");
 * $.scope("scope1").showButton("target1");
 * @param {string} buttonName 검색할 data-button 데이터 속성값
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @throws {Error} 대상 엘리먼트가 1개 이상 발견되었습니다
 * @returns {jQuery} 검색된 HTMLButtonElement 가 포함된 jQuery 객체
 */
$.fn.showButton = function (buttonName) {
    var button = this.find("[data-button=" + buttonName + "]");

    button.assertOne(buttonName);

    button.show();

    return this;
};

/**
 * @function getButtons
 * @description data-button 데이터 속성값이 일치하는 HTMLButtonElement 을 검색한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-button 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="button" id="notTarget" value="Button0" />
 *     <input type="button" data-button="group1" value="Button11" />
 *     <input type="button" data-button="group1" value="Button12" />
 *     <input type="button" data-button="group2" value="Button21" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * var $buttons = $.scope("scope1").getButtons("group1");
 * console.log("$buttons(maybe 2): " + $buttons.length);
 * var $allButtons = $.scope("scope1").getButtons();
 * console.log("$buttons(maybe 3): " + $allButtons.length);
 * @param {string} buttonName 검색할 data-button 데이터 속성값
 * @param {boolean} [assert] true 입력시 jQuery 객체내 포함된 HTMLElement 의 갯수가 0 이면 오류를 발생한다.
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @returns {jQuery} 검색된 HTMLButtonElement 가 포함된 jQuery 객체
 */
$.fn.getButtons = function (buttonName, assert) {
    if (buttonName) {
        var buttons = this.find("[data-button=" + buttonName + "]");

        if (assert) {
            buttons.assertOneMore(buttonName);
        }

        return buttons;
    } else {
        return this.find("[data-button]");
    }
};

/**
 * @function hideButtons
 * @description data-button 데이터 속성값이 일치하는 HTMLButtonElement 을 숨김 처리한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-button 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="button" data-button="target1" value="Button1" />
 *     <input type="button" data-button="target2" value="Button2" />
 *     <input type="button" data-button="target3" value="Button3" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").hideButtons(["target1", "target2"]);
 * $.scope("scope1").hideButtons("target3");
 * @param {array | string} buttonName 검색할 data-button 데이터 속성값
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @returns {jQuery} 검색된 HTMLButtonElement 가 포함된 jQuery 객체
 */
$.fn.hideButtons = function (buttonName) {
    var _this = this;

    var buttons;

    if (Array.isArray(buttonName)) {
        $.each(buttonName, function (i, name) {
            $(_this.find("[data-button=" + name + "]")).hide();
        });
    } else {
        buttons = this.find("[data-button=" + buttonName + "]");

        buttons.assertOneMore(buttonName);

        buttons.hide();
    }

    return _this;
};

/**
 * @function showButtons
 * @description data-button 데이터 속성값이 일치하는 HTMLButtonElement 를 숨김 해제한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-button 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="button" data-button="target1" value="Button1" />
 *     <input type="button" data-button="target2" value="Button2" />
 *     <input type="button" data-button="target3" value="Button3" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").hideButtons(["target1", "target2"]);
 * $.scope("scope1").hideButtons("target3");
 * $.scope("scope1").showButtons(["target1", "target2"]);
 * $.scope("scope1").showButtons("target3");
 * @param {array | string} buttonName 검색할 data-button 데이터 속성값
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @returns {jQuery} 검색된 HTMLButtonElement 가 포함된 jQuery 객체
 */
$.fn.showButtons = function (buttonName) {
    var _this = this;

    var buttons;

    if (Array.isArray(buttonName)) {
        $.each(buttonName, function (i, name) {
            $(_this.find("[data-button=" + name + "]")).show();
        });
    } else {
        buttons = this.find("[data-button=" + buttonName + "]");

        buttons.assertOneMore(buttonName);

        buttons.show();
    }

    return _this;
};

/**
 * @function clickButton
 * @description data-button 데이터 속성값이 일치하는 HTMLButtonElement 에 대하여 click Event 발생시 호출되는 함수를 설정하거나, click Event 를 발생한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-button 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="button" data-button="target1" value="Button1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").clickButton("target1", function (event) {
 *     console.log("click: " + JSON.stringify(event));
 * });
 * $.scope("scope1").clickButton("target1");
 * @param {string} buttonName 검색할 data-button 데이터 속성값
 * @param {function} [callBack] click Event 발생시 호출되는 함수(미입력시 click Event 발생), ex.) function (event) {}
 * @param {boolean} [assert] true 입력시 jQuery 객체내 포함된 HTMLElement 의 갯수가 1개가 아니면 오류를 발생한다.
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @throws {Error} 대상 엘리먼트가 1개 이상 발견되었습니다
 * @returns {jQuery} 검색된 HTMLButtonElement 가 포함된 jQuery 객체
 */
$.fn.clickButton = function (buttonName, callBack, assert) {
    var button = this.find("[data-button=" + buttonName + "]");

    if (assert) {
        button.assertOne(buttonName);
    }

    if (callBack) {
        // 콜백 함수가 존재하면, 이벤트를 등록한다.
        button.off("click").click(callBack);
    } else {
        // 콜백 함수가 없으면 버튼을 클릭한다.
        button.click();
    }

    return this;
};

// data-button 데이터 속성은 BUTTON, INPUT CHECK BOX, INPUT RADIO 엘리먼트에 할당할 수 있다.
/**
 * @function clickButtons
 * @description data-button 데이터 속성값이 일치하는 HTMLButtonElement 에 대하여 click Event 발생시 호출되는 함수를 설정하거나, click Event 를 발생한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-button 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="button" data-button="group1" value="Button1" />
 *     <input type="checkbox" data-button="group1" />
 *     <input type="radio" name="radio1" data-button="group1" />
 *     <input type="radio" name="radio1" data-button="group1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").clickButtons("group1", function (event) {
 *     console.log("click: " + this.type);
 * });
 * $.scope("scope1").clickButtons("group1");
 * @param {string} buttonName 검색할 data-button 데이터 속성값
 * @param {function} [callBack] click Event 발생시 호출되는 함수(미입력시 click Event 발생), ex.) function (event) {}
 * @returns {jQuery} 검색된 HTMLButtonElement 가 포함된 jQuery 객체
 */
$.fn.clickButtons = function (buttonName, callBack) {
    var buttons = this.find("[data-button=" + buttonName + "]");

    buttons.each(function (i, button) {
        if (callBack) {
            // 콜백 함수가 존재하면, 이벤트를 등록한다.
            if ("BUTTON" === $(button).prop("tagName") || ("INPUT" === $(button).prop("tagName") && ("button" === $(button).prop("type")))) {
                $(button).off("click").click(callBack);
            } else if ("INPUT" === $(button).prop("tagName") && ("checkbox" === $(button).prop("type") || "radio" === $(button).prop("type"))) {
                $(button).off("click").click(callBack);

                if ($(button).attr("data-field-format") === "checkbox") { // 해당 엘리먼트가 CHECKBOX 일때, iCheck 이벤트 추가.
                    $(button).on("ifChecked", callBack);
                    $(button).on("ifUnchecked", callBack);
                } else if ($(button).attr("data-field-format") === "radio") { // 해당 엘리먼트가 RADIO 일때, iCheck 이벤트 추가.
                    $(button).on("ifChecked", callBack);
                }
            } else {
                $(button).off("click").click(callBack);
            }
        } else {
            // 콜백 함수가 없으면 버튼을 클릭한다.
            $(button).click();
        }
    });

    return this;
};

/**
 * @function getData
 * @description jQuery 의 .data(key) 함수와 동일하지만, 데이터 속성을 정의하지 않았다면 하위 HTMLElement 에서 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="checkbox" data-field="field1" data-name="name1" data-field-value-if-true="Y" />
 *     <input type="text" data-child="child1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * console.log("data-field(maybe name1): " + $.getField("field1").getData("name")); // data-name -> name
 * console.log("data-name(maybe Y): " + $.getField("field1").getData("fieldValueIfTrue")); // data-field-value-if-true -> fieldValueIfTrue
 * console.log("data-name(maybe child1): " + $.scope("scope1").getData("child")); // data-child -> child
 * @param {string} name 검색할 데이터 속성값, 주의) data- 를 제외하고 낙타표기법으로 변환해 입력해야 한다.
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @throws {Error} 대상 엘리먼트가 1개 이상 발견되었습니다
 * @returns {string} 데이터 속성값
 */
$.fn.getData = function (name) {
    var k_name = v.kebabCase(name);

    var target = this.attr("data-" + k_name);

    if (target === undefined) {
        target = this.find("[data-" + k_name + "]");

        target.assertOne(name);

        return target.attr("data-" + k_name);
    } else {
        return target;
    }
};

/**
 * @function format
 * @description data-field-format 데이터 속성값에 따라 HTMLElement 에 입력값 포맷을 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field-format 데이터 속성 - 입력값의 타입을 설정 -->
 * <!-- data-validation-type 데이터 속성 - 입력값의 검증 타입을 설정 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field-format="timepicker" maxlength="5" />
 *     <input type="text" data-field-format="datepicker" maxlength="10" />
 *     <input type="text" data-field-format="daterangepicker" />
 *     <select data-field-format="select">
 *         <option value="value1" selected>option1</option>
 *         <option value="value2">option2</option>
 *     </select>
 *     <input type="checkbox" data-field-format="checkbox" />
 *     <input type="radio" name="group1" data-field-format="radio" checked />
 *     <input type="radio" name="group1" data-field-format="radio" />
 *     <input type="text" data-validation-type="ip" maxlength="15" />
 *     <input type="text" data-validation-type="phone" maxlength="15" />
 *     <input type="text" data-validation-type="date" maxlength="10" />
 *     <div data-field-format="editor"></div>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").format();
 * @param {string} [type] 타입 ex.) "TIMEPICKER", "DATEPICKER", "DATERANGEPICKER", "SELECT", "CHECKBOX", "RADIO", "IP", "PHONE", "DATE", "DATERANGE", "EDITOR"
 * @param {{}} [options] JSON 타입의 부가 정보
 */
$.fn.format = function (type, options) {
    var _this = this;

    if ("TIMEPICKER" === type || undefined === type) {
        _this.formatTimepicker();
    }

    if ("DATEPICKER" === type || undefined === type) {
        _this.formatDatepicker();
    }

    if ("DATERANGEPICKER" === type || undefined === type) {
        _this.formatDaterangepicker();
    }

    if ("SELECT" === type || undefined === type) {
        _this.formatSelect(options);
    }

    if ("CHECKBOX" === type || undefined === type) {
        _this.formatCheckbox();
    }

    if ("RADIO" === type || undefined === type) {
        _this.formatRadio();
    }

    if ("IP" === type || undefined === type) {
        _this.formatIpAddress();
    }

    if ("PHONE" === type || undefined === type) {
        _this.formatPhone();
    }

    if ("DATE" === type || undefined === type) {
        _this.formatDate();
    }
    //
    // if ("DATERANGE" === type || undefined === type) {
    //     _this.formatDaterange();
    // }

    if ("EDITOR" === type || undefined === type) {
        _this.formatEditor();
    }
};

/**
 * @function formatEditor
 * @description data-field-format 데이터 속성값이 editor 인 HTMLElement 에 대하여 HTML Editor 로 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field-format 데이터 속성 - 입력값의 타입을 설정 -->
 * <div data-scope="scope1">
 *     <div data-field-format="editor"></div>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").formatEditor();
 * @requires module:_EDITOR
 */
$.fn.formatEditor = function () {
    const targets = this.find("[data-field-format=editor]");

    if (targets.length) {
        if ("_EDITOR" in window) {
            $.each(targets, function () {
                _EDITOR.initialize(this);
            })
        }
    }
};

/**
 * @function formatIpAddress
 * @description data-validation-type 데이터 속성값이 ip 인 HTMLInputElement 에 대하여 IP 입력할 수 있는 mask 를 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-validation-type 데이터 속성 - 입력값의 검증 타입을 설정 -->
 * <div data-scope="scope1">
 *     <input type="text" data-validation-type="ip" maxlength="15" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").formatIpAddress();
 * @requires module:_MASK
 */
$.fn.formatIpAddress = function () {
    var targets = this.find("input[data-validation-type=ip]");

    if (targets.length) {
        // targets.mask('0ZZ.0ZZ.0ZZ.0ZZ', {
        //     translation: {
        //         'Z': {
        //             pattern: /[0-9]/, optional: true
        //         }
        //     }
        // });
        $.each(targets, (index, element) => {
            _MASK.initialize(element, _MASK.TYPES.IP);
        });
    }
};

/**
 * @function formatPhone
 * @description data-validation-type 데이터 속성값이 phone 인 HTMLInputElement 에 대하여 전화번호를 입력할 수 있는 mask 를 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-validation-type 데이터 속성 - 입력값의 검증 타입을 설정 -->
 * <div data-scope="scope1">
 *     <input type="text" data-validation-type="phone" maxlength="15" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").formatPhone();
 * @requires module:_MASK
 */
$.fn.formatPhone = function () {
    var targets = this.find("input[data-validation-type=phone]");

    if (targets.length) {
        // targets.mask('0ZZ-0ZZZ-0ZZZ', {
        //     translation: {
        //         'Z': {
        //             pattern: /[0-9]/, optional: true
        //         }
        //     }
        // });
        $.each(targets, (index, element) => {
            _MASK.initialize(element, _MASK.TYPES.PHONE_NUMBER);
        });
    }
};

/**
 * @function formatDate
 * @see https://igorescobar.github.io/jQuery-Mask-Plugin/
 * @description data-validation-type 데이터 속성값이 date 인 HTMLInputElement 에 대하여 날짜를 입력할 수 있는 mask 를 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-validation-type 데이터 속성 - 입력값의 검증 타입을 설정 -->
 * <div data-scope="scope1">
 *     <input type="text" data-validation-type="date" maxlength="10" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").formatDate();
 * @requires jQuery.mask
 */
$.fn.formatDate = function () {
    var targets = this.find("input[data-validation-type=date]");

    if (targets.length) {
        // targets.mask('0ZZZ-0Z-0Z', {
        //     translation: {
        //         'Z': {
        //             pattern: /[0-9]/, optional: true
        //         }
        //     }
        // });
        targets.mask("1000-M0-D0", {
            "translation": {
                "1": {"pattern": /[1-9]/},
                "Y": {"pattern": /[9]/},
                "M": {"pattern": /[0-1]/},
                "m": {"pattern": /[0-2]/},
                "D": {"pattern": /[0-3]/},
                "d": {"pattern": /[0-8]/},
                "z": {"pattern": /[0]/}
            },
            "clearIfNotMatch": true,
            "onKeyPress": (cep, e, field, options) => { /* 1900-01-01 ~ 9999-12-31 */
                const delimiter = "-";
                // year = 1900 ~ 9999
                const maskArray = ["1"];
                maskArray.push(/^[1].*$/.test(cep) ? "Y00" : "000");
                // month = 01 ~ 12
                maskArray.push(delimiter);
                maskArray.push("M");
                maskArray.push(/^\d{4}-[1]\d.*$/.test(cep) ? "m" : "1");
                // day = 01 ~ 28/29/30/31
                maskArray.push(delimiter);
                let lastDay = 31;
                if (7 <= cep.length) {
                    const lastDate = new Date(parseInt(cep.substr(0, 4), 10), parseInt(cep.substr(5, 2), 10), 0); /* new Date(2020, 2, 0) -> 2020년2월말일 */
                    lastDay = lastDate.getDate();
                }
                maskArray.push(28 === lastDay || 29 === lastDay ? "m" : "D");
                if (/^\d{4}-\d{2}-[0].*$/.test(cep)) { /* ####-##-0# */
                    maskArray.push("1");
                } else if (/^\d{4}-\d{2}-[2].*$/.test(cep)) { /* ####-##-2# */
                    if (28 === lastDay) {
                        maskArray.push("d");
                    } else {
                        maskArray.push("0");
                    }
                } else if (/^\d{4}-\d{2}-[3].*$/.test(cep)) { /* ####-##-3# */
                    if (30 === lastDay) {
                        maskArray.push("z");
                    } else {
                        maskArray.push("M");
                    }
                } else {
                    maskArray.push("0");
                }
                field.mask(maskArray.join(""), options);
            }
        });
    }
};
//
// $.fn.formatDaterange = function () {
//     var targets = this.find("input[data-validation-type=daterange]");
//
//     if (targets.length) {
// return;
//         targets.mask("1000-M0-D0 ~ 1000-M0-D0", {
//             "translation": {
//                 "1": {"pattern": /[1-9]/},
//                 "Y": {"pattern": /[9]/},
//                 "M": {"pattern": /[0-1]/},
//                 "m": {"pattern": /[0-2]/},
//                 "D": {"pattern": /[0-3]/},
//                 "d": {"pattern": /[0-8]/},
//                 "z": {"pattern": /[0]/}
//             },
//             "clearIfNotMatch": true,
//             "onKeyPress": (cep, e, field, options) => { /* 1900-01-01 ~ 9999-12-31 */
//                 const separator = " ~ ";
//                 field.mask(dateMask(cep.substr(0, 10)) + separator + dateMask(cep.substr(10 + separator.length)), options);
//
//                 // nested ----------
//                 function dateMask(cep) {
//                     const delimiter = "-";
//                     // year = 1900 ~ 9999
//                     const maskArray = ["1"];
//                     maskArray.push(/^[1].*$/.test(cep) ? "Y00" : "000");
//                     // month = 01 ~ 12
//                     maskArray.push(delimiter);
//                     maskArray.push("M");
//                     maskArray.push(/^\d{4}-[1]\d.*$/.test(cep) ? "m" : "1");
//                     // day = 01 ~ 28/29/30/31
//                     maskArray.push(delimiter);
//                     let lastDay = 31;
//                     if (7 <= cep.length) {
//                         const lastDate = new Date(parseInt(cep.substr(0, 4), 10), parseInt(cep.substr(5, 2), 10), 0); /* new Date(2020, 2, 0) -> 2020년2월말일 */
//                         lastDay = lastDate.getDate();
//                     }
//                     maskArray.push(28 === lastDay || 29 === lastDay ? "m" : "D");
//                     if (/^\d{4}-\d{2}-[0].*$/.test(cep)) { /* ####-##-0# */
//                         maskArray.push("1");
//                     } else if (/^\d{4}-\d{2}-[2].*$/.test(cep)) { /* ####-##-2# */
//                         if (28 === lastDay) {
//                             maskArray.push("d");
//                         } else {
//                             maskArray.push("0");
//                         }
//                     } else if (/^\d{4}-\d{2}-[3].*$/.test(cep)) { /* ####-##-3# */
//                         if (30 === lastDay) {
//                             maskArray.push("z");
//                         } else {
//                             maskArray.push("M");
//                         }
//                     } else {
//                         maskArray.push("0");
//                     }
//                     return maskArray.join("");
//                 }
//             }
//         });
//     }
// };

/**
 * @function formatTimepicker
 * @description data-field-format 데이터 속성값이 timepicker 인 HTMLInputElement 에 대하여 시간을 입력할 수 있게 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field-format 데이터 속성 - 입력값의 타입을 설정 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field-format="timepicker" maxlength="5" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").formatTimepicker();
 * @requires module:_FORM
 */
$.fn.formatTimepicker = function () {
    var targets = this.find("[data-field-format=timepicker]");

    if (targets.length) {
        const config = {
            'timeFormat': 'H:i',
            "wrapHours": false,
            "lang": { am: 'am', pm: 'pm', AM: 'AM', PM: 'PM', decimal: '.', mins: '분', hr: '시간', hrs: '시간' }
        };
        $.each(targets, function (i, e) {
            _FORM.timepicker(e, config);
        })
    }
};

/**
 * @function formatDatepicker
 * @description data-field-format 데이터 속성값이 datepicker 인 HTMLInputElement 에 대하여 날짜를 입력할 수 있게 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field-format 데이터 속성 - 입력값의 타입을 설정 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field-format="datepicker" maxlength="10" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").formatDatepicker();
 * @requires module:_FORM
 */
$.fn.formatDatepicker = function () {
    var targets = this.find("[data-field-format=datepicker]");

    targets.addClass("cursor-pointer");

    if (targets.length) {
        const defaultConfig = {
            "language": $("html").attr("lang"),
            "format": _DATES.DEFAULT_FORMAT.toLowerCase(),
            "todayBtn": "linked",
            "autoclose": true,
            "clearBtn": true,
            "todayHighlight": true,
            "templates": {
                "leftArrow": '<i class="fal fa-chevron-left"></i>',
                "rightArrow": '<i class="fal fa-chevron-right"></i>'
            }
        };
        $.each(targets, function (index, element) {
            const config = _.clone(defaultConfig);
            _FORM.datepicker(element, config);
        });
    }
};

/**
 * @function formatDaterangepicker
 * @description data-field-format 데이터 속성값이 daterangepicker 인 HTMLInputElement 에 대하여 기간을 입력할 수 있게 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field-format 데이터 속성 - 입력값의 타입을 설정 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field-format="daterangepicker" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").formatDaterangepicker();
 * @requires module:_DATERANGEPICKER
 */
$.fn.formatDaterangepicker = function () {
    this.find("[data-field-format=daterangepicker]").each(function (index, element) {
        let $target = $(element);

        $target.addClass("cursor-pointer");

        _DATERANGEPICKER.initialize($target);
    });
};

/**
 * @function formatSelect
 * @description data-field-format 데이터 속성값이 select 인 HTMLSelectElement 를 다른 스타일로 변경한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field-format 데이터 속성 - 입력값의 타입을 설정 -->
 * <div data-scope="scope1">
 *     <select data-field-format="select">
 *         <option value="value1" selected>option1</option>
 *         <option value="value2">option2</option>
 *     </select>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").formatSelect();
 * @param {{}} [options] JSON 타입의 부가 정보
 * @requires module:_SELECT
 */
$.fn.formatSelect = function (options) {
    this.find("[data-field-format=select]").each(function (index, element) {
        _SELECT.initialize($(element), options);
    });
};

/**
 * @function formatCheckbox
 * @see http://icheck.fronteed.com/
 * @description data-field-format 속성값이 checkbox 인 HTMLInputElement 에 대하여 다른 스타일로 변경한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field-format 데이터 속성 - 입력값의 타입을 설정 -->
 * <div data-scope="scope1">
 *     <input type="checkbox" data-field-format="checkbox" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").formatCheckbox();
 * @param {{}} [options] JSON 타입의 부가 정보
 * @requires jQuery.iCheck
 */
$.fn.formatCheckbox = function (options) {
    var defaultOptions = {};

    if (this.attr("data-field-format") === "checkbox") {
        if (undefined !== this.attr("data-checkbox-class") && "" === this.attr("data-checkbox-class")) {
            defaultOptions.checkboxClass = this.attr("data-checkbox-class");
        } else {
            defaultOptions.checkboxClass = "icheckbox_flat-blue";
        }

        this.iCheck(_.extend(defaultOptions, options));

        this.on("ifChanged", function () {
            $(this).iCheck("update");
        });
    } else {
        var target = this.find("[data-field-format=checkbox]");

        $.each(target, function (i, obj) {
            obj = $(obj);

            if (undefined !== obj.attr("data-checkbox-class") && "" !== obj.attr("data-checkbox-class")) {
                defaultOptions.checkboxClass = obj.attr("data-checkbox-class");
            } else {
                defaultOptions.checkboxClass = "icheckbox_flat-blue";
            }

            obj.iCheck(_.extend(defaultOptions, options));

            obj.on("ifChanged", function () {
                obj.iCheck("update");
            });
        });
    }
};

/**
 * @function formatRadio
 * @see http://icheck.fronteed.com/
 * @description data-field-format 속성값이 radio 인 HTMLInputElement 를 다른 스타일로 변경한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field-format 데이터 속성 - 입력값의 타입을 설정 -->
 * <div data-scope="scope1">
 *     <input type="radio" name="group1" data-field-format="radio" checked />
 *     <input type="radio" name="group1" data-field-format="radio" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").formatCheckbox();
 * @requires jQuery.iCheck
 */
$.fn.formatRadio = function () {
    if (this.attr("data-field-format") === "radio") {
        this.iCheck({
            radioClass: 'iradio_flat-blue'
        });
    } else {
        var target = this.find("[data-field-format=radio]");

        if (target.length > 0) {
            target.iCheck({
                radioClass: 'iradio_flat-blue'
            });
        }
    }
};

$.fn.bindTooltip = function (options) {
    var defaultOptions = {};

    _.extend(defaultOptions, options)

    if (this.attr("data-toggle") === "tooltip") {
        this.tooltip(options);
    } else {
        var target = this.find("[data-toggle=tooltip]");

        if (target.length > 0) {
            target.tooltip(options);
        }
    }
};

$.fn.bindPopover = function (options) {
    var defaultOptions = {};

    _.extend(defaultOptions, options)

    if (this.attr("data-toggle") === "popover") {
        this.popover(options);
    } else {
        var target = this.find("[data-toggle=popover]");

        if (target.length > 0) {
            target.popover(options);
        }
    }
};

/**
 * @function pagination
 * @description 데이터의 건수와 페이지번호를 보여주는 HTMLElement 로 설정한다.
 * @see https://josecebe.github.io/twbs-pagination/
 * @description 페이지네이션을 추가한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <div data-scope="pagination"></div>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").pagination({
 *     currentPage: 2,
 *     totalPage: 10,
 *     onPageClick: function (event, clickedPage) {
 *         _AJAX.get({
 *             url: "/test",
 *             data: {
 *                 "currentPage": clickedPage,
 *                 "rowsPerPage": 10
 *             },
 *             ...
 *         });
 *     }
 * });
 * // $.scope("scope1").pagination("destroy");
 * @param {{} | string} options JSON 타입의 부가정보 또는 타입
 * @param {number} options.totalCount 총건수
 * @param {number} [options.currentPage=1] 현재 page 번호
 * @param {number} [options.totalPage=1] 총 page 수
 * @param {function} [options.onPageClick] page 번호 click Event 발생시 호출되는 함수, ex.) function (event, clickedPage) {}
 * @param {object} options.onPageClick.event event 객체
 * @param {number} options.onPageClick.clickedPage click 한 page 번호
 * @param {number} [options.visiblePages=10] 표시된 page 번호 갯수
 * @param {string} [options.scopeNames="pagination"] 검색할 data-scope 데이터 속성값
 * @requires jQuery.twbsPagination
 */
$.fn.pagination = function (options) {
    const _this = this;
    const scopeNames = (null != options && null != options.scopeNames ? options.scopeNames : "pagination");
    // this.scope("pagination").twbsPagination("destroy");
    _this.scope(scopeNames).twbsPagination("destroy");
    _this.setFieldText("totalCount", options.totalCount + _i18n.t("건"));
    const defaultOptions = {
        startPage: Number(options.currentPage || 1),
        totalPages: options.totalPage || 1,
        visiblePages: 10,
        itemOnPage: 10,
        initiateStartPageClick: false,
        first: '&laquo;&laquo;',
        prev: '&laquo;',
        next: '&raquo;',
        last: '&raquo;&raquo;',
        onPageClick: options.onPageClick || function() {}
    };

    if (options !== "destroy") {

        options = _.extend(defaultOptions, options);

        // this.scope("pagination").twbsPagination(options);
        this.scope(scopeNames).twbsPagination(options);

        this.scope(scopeNames).find("ul").addClass("justify-content-center");
    }
};

/**
 * @function currentPage
 * @description 현재 페이지번호를 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <div data-scope="pagination"></div>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").pagination({
 *     currentPage: 2,
 *     totalPage: 10
 * });
 * console.log("currentPage(maybe 2): " + $.scope("scope1").currentPage());
 * @param {{} | null} options JSON 타입의 부가 정보
 * @param {string} [options.scopeNames="pagination"] 검색할 data-scope 데이터 속성값
 */
$.fn.currentPage = function (options) {
    const scopeNames = (null != options && null != options.scopeNames ? options.scopeNames : "pagination");

    return this.scope(scopeNames).twbsPagination('getCurrentPage');
}

/**
 * @function pressEnterOnFields
 * @description data-field 데이터 속성값이 정의된 HTMLElement 에 대하여 keypress Event 발생시 호출되는 함수를 추가하고, enter key 입력시 호출되는 함수를 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="text" data-field="target1" />
 *     <input type="text" id="notTarget" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").pressEnterOnFields(function () {
 *     _AJAX.get({
 *         url: "/test",
 *         data: $.scope("scope1").getFieldParameters(),
 *         ...
 *     });
 * });
 * @param {function} callBackFunc enter key 입력시 호출될 함수
 * @listens keypress
 */
$.fn.pressEnterOnFields = function (callBackFunc) {
    const $target = this.find("[data-field]");

    $target.keypress(function (evt) {
        if (evt.keyCode === 13) {
            callBackFunc();
        }
    });
};

/**
 * @function changeOnSelectFields
 * @description data-field 데이터 속성값이 정의된 HTMLSelectElement 에 대하여 change Event 발생시 호출되는 함수를 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <select data-field="target1">
 *         <option value="value1" selected>option1</option>
 *         <option value="value2">option2</option>
 *     </select>
 *     <select id="notTarget">
 *         <option value="value11" selected>option11</option>
 *         <option value="value12">option12</option>
 *     </select>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").changeOnSelectFields(function () {
 *     console.log("change: " + $(this).val());
 * });
 * @param {function} callBackFunc change event 발생시 호출될 함수
 * @listens change
 */
$.fn.changeOnSelectFields = function (callBackFunc) {
    var target = this.find("select[data-field]");

    target.change(function () {
        callBackFunc();
    });
};

/**
 * @function replaceClass
 * @description class 속성값을 바꿔준다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1" class="oldClass1"></div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").replaceClass("oldClass1", "newClass1");
 * @param {string} oldClass 삭제할 클래스
 * @param {string} newClass 추가할 클래스
 * @returns {jQuery} HTMLElement 가 포함된 jQuery 객체
 */
$.fn.replaceClass = function (oldClass, newClass) {
    var _this = this;

    _this.removeClass(oldClass).addClass(newClass);

    return _this;
};

/**
 * @function bindSelected
 * @description 하위 HTMLTableRowElement click 시 해당 class 속성값을 추가하거나 삭제하여 선택/해제를 표시한다. 또한, data-field-format 속성값이 checkbox 인 하위 HTMLInputElement 에 대하여 다른 스타일로 변경한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <table data-scope="table1">
 *     <tbody>
 *         <tr>
 *             <td>value1</td>
 *             <td>value2</td>
 *         </tr>
 *         <tr>
 *             <td>value1</td>
 *             <td>value2</td>
 *         </tr>
 *     </tbody>
 * </table>
 * @example <caption>JAVAScript:</caption>
 * $.scope("table1").bindSelected(false);
 * @param {boolean} isMultiple 여러 행 선택 가능 여부
 * @param {function} [callBackFunc] click 시 호출될 함수, ex.) function (event) {console.log("tagName(maybe TR): " + this.tagName)}
 * @param {string} [selectedClass="bg-info-50"] 추가하거나 삭제할 class 속성값
 * @listens click
 */
$.fn.bindSelected = function (isMultiple, callBackFunc, selectedClass) {
    const _this = this;
    const newSelectedClass = (!v.isBlank(selectedClass) ? selectedClass : "bg-info-50");
    let target;

    if (_this.prop("tagName") === "TABLE") {
        target = _this.find("tbody>tr");
    } else if (_this.prop("tagName") === "TBODY") {
        target = _this.find("tr");
    } else {
        target = _this.find("tbody>tr");
    }

    if (isMultiple !== false) {
        target.click(function (evt) {
            const _that = $(this);

            if (evt.target.tagName === "TR" || evt.target.tagName === "TD") {
                _that.toggleClass(newSelectedClass);

                if (undefined !== callBackFunc) {
                    callBackFunc.apply(_that);
                }
            }
        });
    } else {
        target.click(function (evt) {
            const _that = $(this);

            if (evt.target.tagName === "TR" || evt.target.tagName === "TD") {
                _that.addClass(newSelectedClass);
                _that.siblings().removeClass(newSelectedClass);

                if (undefined !== callBackFunc) {
                    callBackFunc.apply(_that, [evt]);
                }
            }
        });
    }

    target.format("CHECKBOX");
};

/**
 * @function hasSelectedTrElements
 * @description 선택된 HTMLTableRowElement 가 존재하는지, 그 여부를 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <table data-scope="table1">
 *     <tbody>
 *         <tr class="bg-info-50">
 *             <td>value1</td>
 *         </tr>
 *     </tbody>
 * </table>
 * @example <caption>JAVAScript:</caption>
 * if ($.scope("table1").hasSelectedTrElements()) console.log("This is displayed!");
 * @returns {boolean} 선택 여부
 */
$.fn.hasSelectedTrElements = function () {
    var _this = this;

    return _this.getSelectedTrElementsValues().length >= 1;
};

/**
 * @function getSelectedTrElements
 * @description 선택된 HTMLTableRowElement 를 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <table data-scope="table1">
 *     <tbody>
 *         <tr class="bg-info-50">
 *             <td>
 *                 <input type="text" data-field="field1" value="value1" />
 *             </td>
 *         </tr>
 *         <tr id="notTarget">
 *             <td>
 *                 <input type="text" data-field="field1" value="value2" />
 *             </td>
 *         </tr>
 *     </tbody>
 * </table>
 * @example <caption>JAVAScript:</caption>
 * console.log("json(maybe {field1: 'value1'}): " + JSON.stringify($.scope("table1").getSelectedTrElements()));
 * @returns {jQuery} 선택된 HTMLTableRowElement 가 포함된 jQuery 객체
 */
$.fn.getSelectedTrElements = function () {
    var _this = this;

    return _this.find("tr.bg-info-50");
};

/**
 * @function removeSelectedTrElements
 * @description 선택된 HTMLTableRowElement 를 제거한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <table data-scope="table1">
 *     <tbody>
 *         <tr class="bg-info-50">
 *             <td>value1</td>
 *         </tr>
 *         <tr id="notTarget">
 *             <td>value2</td>
 *         </tr>
 *     </tbody>
 * </table>
 * @example <caption>JAVAScript:</caption>
 * $.scope("table1").removeSelectedTrElements();
 */
$.fn.removeSelectedTrElements = function () {
    const _this = this;

    _this.getSelectedTrElements().remove();
};

/**
 * @function getSelectedTrElementsValues
 * @description 선택된 HTMLTableRowElement 내 HTMLElement 의 value 속성값을 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <table data-scope="table1">
 *     <tbody>
 *         <tr class="bg-info-50">
 *             <td>
 *                 <input type="text" data-field="field1" value="value1" />
 *             </td>
 *         </tr>
 *         <tr id="notTarget">
 *             <td>
 *                 <input type="text" data-field="field1" value="value2" />
 *             </td>
 *         </tr>
 *     </tbody>
 * </table>
 * @example <caption>JAVAScript:</caption>
 * var valueArray1 = $.scope("table1").getSelectedTrElementsValues("field1");
 * var valueArray11 = $.scope("table1").getSelectedTrElementsValues();
 * console.log("value(maybe ['value1']): " + JSON.stringify(valueArray1));
 * console.log("value(maybe [{'field1': 'value1'}]): " + JSON.stringify(valueArray11));
 * @param {string} [fieldName] 검색할 data-field 데이터 속성값, 미입력시 data-field 데이터 속성값을 정의한 HTMLElement 를 모두 포함
 * @param {boolean} [isDataValues] 검색할 data-value 데이터 JSON 값
 * @returns {array} 배열 타입의 value 속성값 ex.) ["value1"], [{"field1": "value1"}]
 */
$.fn.getSelectedTrElementsValues = function (fieldName, isDataValues) {
    var _this = this;

    var selectedRows = _this.getSelectedTrElements();

    var output = [];

    if (fieldName === undefined) {
        $.each(selectedRows, function () {
            var _that = $(this);

            if (isDataValues) {
                output.push(_that.data("value"));
            } else {
                output.push(_that.getFieldParameters());
            }
        });
    } else {
        $.each(selectedRows, function () {
            var _that = $(this);

            if (isDataValues) {
                output.push(_that.data("value")[fieldName]);
            } else {
                output.push(_that.getFieldValue(fieldName));
            }
        });
    }

    return output;
};

/**
 * @function getSelectedTrElementValue
 * @description 선택된 HTMLTableRowElement 에 대하여 data-field 데이터 속성값이 존재하는 HTMLElement 의 value 속성값을 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <table data-scope="table1">
 *     <tbody>
 *         <tr class="bg-info-50">
 *             <td>
 *                 <input type="text" data-field="field1" value="value1" />
 *             </td>
 *         </tr>
 *         <tr id="notTarget">
 *             <td>
 *                 <input type="text" data-field="field1" value="value2" />
 *             </td>
 *         </tr>
 *     </tbody>
 * </table>
 * @example <caption>JAVAScript:</caption>
 * console.log("value(maybe value1): " + $.scope("table1").getSelectedTrElementValue("field1"));
 * console.log("value(maybe {field1: 'value1'}): " + JSON.stringify($.scope("table1").getSelectedTrElementValue()));
 * @param {string} [fieldName] 검색할 data-field 데이터 속성값
 * @throws {Error} 대상 엘리먼트를 찾지 못했습니다
 * @throws {Error} 대상 엘리먼트가 1개 이상 발견되었습니다
 * @returns {{} | string} 배열/문자열 타입의 value 속성값, ex.) "value1", {"field1": "value1"}
 */
$.fn.getSelectedTrElementValue = function (fieldName) {
    var _this = this;

    var selectedRow = _this.getSelectedTrElements();

    selectedRow.assertOne();

    if (fieldName === undefined) {
        return selectedRow.getFieldParameters();
    } else {
        return selectedRow.getFieldValue(fieldName);
    }
};

/**
 * @function clearSelected
 * @description HTMLTableRowElement 의 선택을 모두 해제한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <table data-scope="table1">
 *     <tbody>
 *         <tr class="bg-info-50">
 *             <td>value1</td>
 *         </tr>
 *         <tr id="notTarget">
 *             <td>value2</td>
 *         </tr>
 *     </tbody>
 * </table>
 * @example <caption>JAVAScript:</caption>
 * $.scope("table1").clearSelected();
 * if (!$.scope("table1").hasSelectedTrElements()) console.log("This is displayed!");
 */
$.fn.clearSelected = function () {
    var _this = this;

    var selectedRows = _this.find("tr.bg-info-50");

    selectedRows.removeClass("bg-info-50");
};

/**
 * @function getCheckedTrElements
 * @description 선택된 checkbox 를 포함하는 HTMLTableRowElement 를 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <table data-scope="table1">
 *     <tbody>
 *         <tr id="target">
 *             <td>
 *                 <input type="checkbox" checked />
 *             </td>
 *         </tr>
 *         <tr id="notTarget">
 *             <td>
 *                 <input type="checkbox" />
 *             </td>
 *         </tr>
 *     </tbody>
 * </table>
 * @example <caption>JAVAScript:</caption>
 * console.log("id(maybe target): " + $.scope("table1").getCheckedTrElements().attr("id"));
 * @returns {jQuery} 검색된 HTMLTableRowElement 가 포함된 jQuery 객체
 */
$.fn.getCheckedTrElements = function () {
    var _this = this;

    if ("TBODY" !== _this.prop("tagName")) {
        _this = _this.find("tbody");
    }

    var checkedCheckbox = _this.find("tr input[type=checkbox]:checked");

    return checkedCheckbox.closest("tr");
};

/**
 * @function hasCheckedTrElements
 * @description 선택된 checkbox 를 포함하는 HTMLTableRowElement 가 존재하는지, 그 여부를 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <table data-scope="table1">
 *     <tbody>
 *         <tr id="target">
 *             <td>
 *                 <input type="checkbox" checked />
 *             </td>
 *         </tr>
 *         <tr id="notTarget">
 *             <td>
 *                 <input type="checkbox" />
 *             </td>
 *         </tr>
 *     </tbody>
 * </table>
 * @example <caption>JAVAScript:</caption>
 * if ($.scope("table1").hasCheckedTrElements()) console.log("This is displayed!");
 * @returns {boolean} 선택 여부
 */
$.fn.hasCheckedTrElements = function () {
    var _this = this;

    return _this.getCheckedTrElements().length >= 1;
};

/**
 * @function removeCheckedTrElements
 * @description 선택된 checkbox 를 포함하는 HTMLTableRowElement 를 모두 제거한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <table data-scope="table1">
 *     <tbody>
 *         <tr id="target">
 *             <td>
 *                 <input type="checkbox" checked />
 *             </td>
 *         </tr>
 *         <tr id="notTarget">
 *             <td>
 *                 <input type="checkbox" />
 *             </td>
 *         </tr>
 *     </tbody>
 * </table>
 * @example <caption>JAVAScript:</caption>
 * $.scope("table1").removeCheckedTrElements();
 * @requires module:~TOAST
 * @returns {jQuery} removeCheckedTrElements() 함수를 호출하는 jQuery 객체
 */
$.fn.removeCheckedTrElements = function () {
    var _this = this;

    var count = _this.getCheckedTrElements().length;

    _this.getCheckedTrElements().remove();

    _TOAST.success(count + _i18n.t("개의-행이-삭제되었습니다-"));

    return _this;
};

/**
 * @function hasTrElements
 * @description HTMLTableRowElement 가 존재하는지, 그 여부를 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <table data-scope="table1">
 *     <tbody>
 *         <tr>
 *             <td>value1</td>
 *         </tr>
 *     </tbody>
 * </table>
 * @example <caption>JAVAScript:</caption>
 * if ($.scope("table1").hasTrElements()) console.log("This is displayed!");
 * @returns {boolean} 존재 여부
 */
$.fn.hasTrElements = function () {
    var _this = this;

    return _this.getTrElements().length > 0;
};

/**
 * @function getTrElements
 * @description 하위 HTMLTableRowElement 를 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <table data-scope="table1">
 *     <tbody>
 *         <tr id="target">
 *             <td>value1</td>
 *         </tr>
 *     </tbody>
 * </table>
 * @example <caption>JAVAScript:</caption>
 * console.log("id(maybe target): " + $.scope("table1").getTrElements().attr("id"));
 * @returns {jQuery} 검색된 HTMLTableRowElement 가 포함된 jQuery 객체
 */
$.fn.getTrElements = function () {
    var _this = this;

    return _this.find("tbody>tr");
};

/**
 * @function getFieldElements
 * @description data-field 데이터 속성값이 일치하는 HTMLElement 가 1개 존재하는지, 그 여부를 가져온다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <table data-scope="table1">
 *     <tbody>
 *         <tr class="bg-info-50">
 *             <td>
 *                 <input type="text" data-field="target1" />
 *             </td>
 *         </tr>
 *         <tr>
 *             <td>
 *                 <input type="text" data-field="notTarget" />
 *             </td>
 *         </tr>
 *     </tbody>
 * </table>
 * @example <caption>JAVAScript:</caption>
 * if ($.scope("table1").getSelectedTrElements().getFieldElements("target1")) console.log("This is displayed!");
 * @param {string} fieldName 검색할 data-field 데이터 속성값
 * @returns {boolean} 1개 여부
 * */
$.fn.getFieldElements = function (fieldName) {
    var _this = this;

    var target = _this.find("[data-field=" + fieldName + "]");
    var OUTPUT = !(target.length === 0 || target.length > 1);
    // if (target.length === 0 || target.length > 1) {
    //     OUTPUT = false;
    // } else {
    //     OUTPUT = true;
    // }
    log.debug(" OUTPUT:: " + OUTPUT);
    return OUTPUT;
};

/**
 * @function clearTable
 * @description 조회조건과 조회결과를 모두 지워준다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <div data-scope=SCOPE.CRITERIA>
 *         <input type="text" data-field="criteria1" value="value1" /
 *     </div>
 *     <table>
 *         <script data-template=SCOPE.RESULT_BODY type="text/x-handlebars-template">
 *             {{#each this}}
 *                 <tr>
 *                     <td>{{column1}}</td>
 *                 </tr>
 *             {{else}}
 *                 <tr>
 *                     <td th:text="#{데이터가 존재하지 않습니다.}"></td>
 *                 </tr>
 *             {{/each}}
 *         </script>
 *         <tbody data-scope=SCOPE.RESULT_BODY></tbody>
 *     </table>
 *     <div data-scope="pagination"></div>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").clearTable();
 * @param {string} [scopeName=SCOPE.RESULT_BODY] 검색할 data-scope 데이터 속성값
 * @param {boolean} [skipHidden] false 입력시 hidden 타입의 HTMLInputElement 에 대하여 value 속성값을 지워준다.
 */
$.fn.clearTable = function (scopeName, skipHidden) {
    const _this = $(this);

    _this.scope(SCOPE.CRITERIA).clearFields(skipHidden);

    if (undefined === scopeName) scopeName = SCOPE.RESULT_BODY;

    const template = _this.template(SCOPE.RESULT_BODY);

    // _this.scope(SCOPE.RESULT_BODY).html(template([]));
    _this.scope(scopeName).html(template([]));

    _this.pagination({
        totalPage: 1,
        currentPage: 1,
        totalCount: 0,
        visiblePages: 5
    });
}

/**
 * @function formatApplyPeriod
 * @description 일정 기간내 날짜만 입력하도록 설정한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field-format 데이터 속성 - 입력값의 타입을 설정, ex.) "datepicker" -->
 * <!-- 7일이내 선택가능 -->
 * <input type="hidden" data-field="allowedPeriod" value="7" />
 * <input type="hidden" data-field="allowedUnit" value="days" />
 * <div data-scope="scope1">
 *     <input type="text" id="target1" data-field-format="datepicker" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").formatApplyPeriod();
 * @requires module:_FORM
 */
$.fn.formatApplyPeriod = function () {
    var _this = this;

    var maxDate = _DATES.add(_DATES.today(), $(document).getFieldValue("allowedPeriod"), $(document).getFieldValue("allowedUnit"));

    var period = _DATES.between(_DATES.today(), maxDate);

    var target = _this.find("[data-field-format=datepicker]").attr("data-period", period);

    _FORM.datepicker(target);
};

/**
 * @function getCondition
 * @description PDF 머리글(왼쪽 구역)에 조회조건을 표기한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-field 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope=SCOPE.CRITERIA>
 *      <div class="row">
 *          <div class="col-lg-12">
 *              <div class="grey-label">로그인ID</div>
 *              <div class="grid-cell">
 *                  <input type="text" data-field="loginId" class="form-control" placeholder="로그인ID" maxlength="32"/>
 *              </div>
 *          </div>
 *      </div>
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope(SCOPE.CRITERIA).getCondition();
 */
$.fn.getCondition = function () {
    const _this = this;

    let conditionFields = _this.getFields();
    let conditionCount = 0;
    let condition = "조회조건 : ";

    $.each(conditionFields, function (i, e) {
        if ($(e).data("field") !== "currentPage" && $(e).data("field") !== "rowsPerPage") {
            let conditionValue;

            if (e.tagName === "SELECT") conditionValue = $(e).find("option").filter(":selected").text();
            else conditionValue = $(e).val();

            const conditionName = $(e).closest(".grid-cell").siblings().text();

            condition += `${conditionName}=${conditionValue}`;

            conditionCount++;

            if (conditionFields.length - 2 !== conditionCount) condition += ", ";
        }
    });

    return condition;
};

/**
 * @function addToolTip
 * @description has-tooltip class를 가진 element에 tooltip 기능을 추가한다.
 * @example <caption>HTML:</caption>
 * <button class="btn btn-info btn-xs btn-icon waves-effect waves-themed has-tooltip" title="다운로드">
 * @example <caption>JAVAScript:</caption>
 * $.scope(SCOPE.CRITERIA).addToolTip();
 */
$.fn.addToolTip = function (options) {
    const _this = this;

    const defaultOptions = {
        selector: ".has-tooltip",
        trigger: "hover",
        placement: "top"
    };

    _this.tooltip(_.extend(defaultOptions, options));
};

// BEGIN jquery.blockUI.js 내 customizing code 를 여기로 이동한다.
/* 2018.12.21 추가. jason, Moon */
// if (typeof opts === "string") {
//     opts = { message: '<h5>' + opts + '</h5>'};
// }
/* // 2018.12.21 추가. jason, Moon */

if ($.blockUI !== undefined) {
    $.fn.blockDefaultFunction = $.fn.block;
    $.blockUI.defaults.css.width = "50%"; /* before 30% */
    $.blockUI.defaults.baseZ = 950; // 상단 메뉴바 z-index 때문에 변경(default=1000)

    $.fn.block = function(opts) {
        if (typeof opts === "string") {
            opts = { message: '<div class="my-1">' + opts + '</div>'};
        }
        $(this).blockDefaultFunction(opts);
    }
}
// END jquery.blockUI.js 내 customizing code 를 여기로 이동한다.

/**
 * @file HTMLSelectElement 관련
 * @see https://api.jquery.com/
 * @see https://select2.org/
 * @requires jQuery
 * @requires jQuery.select2
 * @module _SELECT
 */
(function (window, jQuery) {
    "use strict";
    var pluginName = "_SELECT";

    if (!window.hasOwnProperty(pluginName) || null == window[pluginName]) window[pluginName] = {
        // Select2 여부
        isSelect2: function () {return (null != jQuery && null != $.fn.select2);},

        /**
         * @function initialize
         * @description HTMLSelectElement 를 다른 스타일로 설정한다.
         * @example <caption>HTML:</caption>
         * <select id="select1">
         *     <option value="value1">text1</option>
         *     <option value="value2">text2</option>
         * </select>
         * @example <caption>JAVAScript:</caption>
         * var select1 = document.getElementById("select1");
         * _SELECT.initialize($(select1), {placeholder: "placeholder1"});
         * @param {jQuery} $selectElement HTMLSelectElement 가 포함된 jQuery 객체
         * @param {{}} [options] JSON 타입의 부가 정보 ex.) {placeholder: "placeholder1"}
         */
        initialize: function ($selectElement, options) {
            if (!_SELECT.isSelect2()) return;

            var newOptions = {minimumResultsForSearch: 1 / 0};
            var $parents;
            var $modal;

            if (options !== undefined) {
                newOptions = $.extend(true, newOptions, options);
            }
            $parents = $selectElement.parentsUntil(".modal");
            $modal = $parents.last();
            if ("DIV" === $modal.prop("tagName")) {
                newOptions["dropdownParent"] = $modal.parent();
            }
            $selectElement["select2"](newOptions);
        },

        /**
         * @function callChange
         * @description 해당 함수를 호출한 후 값 변경시 change Event 발생한다.
         * @example <caption>HTML:</caption>
         * <select id="select1">
         *     <option value="value1" selected>text1</option>
         *     <option value="value2">text2</option>
         * </select>
         * @example <caption>JAVAScript:</caption>
         * var select1 = document.getElementById("select1");
         * _SELECT.callChange($(select1), function () {
         *     $(select1).val("2");
         * });
         * @param {jQuery} $selectElement HTMLSelectElement 가 포함된 jQuery 객체
         * @param {function} mainFunction main 함수
         * @fires change
         */
        callChange: function ($selectElement, mainFunction) {
            var beforeValue = $selectElement.val();
            mainFunction();
            if (beforeValue !== $selectElement.val()) $selectElement.change();
        },

        /**
         * @function changeAtFirstOption
         * @description HTMLSelectElement 내 첫번째 HTMLOptionElement 를 선택한다.
         * @example <caption>HTML:</caption>
         * <select id="select1">
         *     <option value="value1">text1</option>
         *     <option value="value2" selected>text2</option>
         * </select>
         * @example <caption>JAVAScript:</caption>
         * var select1 = document.getElementById("select1");
         * _SELECT.changeAtFirstOption($(select1));
         * @param {jQuery} $selectElement HTMLSelectElement 가 포함된 jQuery 객체
         * @fires change
         */
        changeAtFirstOption: function ($selectElement) {
            _SELECT.callChange($selectElement, function () {
                $selectElement.find(">option:first").prop("selected", true);
            });
        },

        /**
         * @function changeValue
         * @description 값을 변경하고 change Event 를 발생한다.
         * @example <caption>HTML:</caption>
         * <select id="select1">
         *     <option value="value1">text1</option>
         *     <option value="value2" selected>text2</option>
         * </select>
         * @example <caption>JAVAScript:</caption>
         * var select1 = document.getElementById("select1");
         * _SELECT.changeValue($(select1), "value1");
         * @param {jQuery} $selectElement HTMLSelectElement 가 포함된 jQuery 객체
         * @param {string} value 변경할 값
         * @fires change
         */
        changeValue: function ($selectElement, value) {
            _SELECT.callChange($selectElement, function () {
                $selectElement.val(value);
            });
        },

        /**
         * @function change
         * @description change Event 발생시 호출되는 함수를 설정한다.
         * @example <caption>HTML:</caption>
         * <select id="select1">
         *     <option value="value1">text1</option>
         *     <option value="value2" selected>text2</option>
         * </select>
         * @example <caption>JAVAScript:</caption>
         * var select1 = document.getElementById("select1");
         * _SELECT.change($(select1), function (event) {console.log("change: " + JSON.stringify(event));});
         * @param {jQuery} $selectElement HTMLSelectElement 가 포함된 jQuery 객체
         * @param {function} callback change Event 발생시 호출되는 함수, ex.) function (event) {}
         * @param {boolean} [isAdding] true 를 입력하면, change Event 발생시 호출되는 함수를 새로 추가한다.
         */
        change: function ($selectElement, callback, isAdding) {
            const eventType = (_SELECT.isSelect2() ? "select2:select" : "change");

            if (true === isAdding) {
                $selectElement.on(eventType, callback);
            } else {
                $selectElement.off(eventType).on(eventType, callback);
            }
        },

        /**
         * @function bindOptions
         * @description HTMLSelectElement 내 HTMLOptionElement 를 모두 변경한다.
         * @example <caption>HTML:</caption>
         * <select id="select1"></select>
         * @example <caption>JAVAScript:</caption>
         * var select1 = document.getElementById("select1");
         * _SELECT.bindOptions($(select1), [{value: "value1", text: "text1"}, {value: "value2", text: "text2"}]);
         * @param {jQuery} $selectElement HTMLSelectElement 가 포함된 jQuery 객체
         * @param {array} data 배열 타입의 데이터 ex.) [{value: "value1", text: "text1"}, {value: "value2", text: "text2"}]
         * @param {string} [type="ALL"] 최상단에 추가할 HTMLOptionElement 의 text 속성값, "ALL"/"CHOICE" 입력시 "(전체)"/"(선택)" 입력과 동일
         */
        bindOptions: function ($selectElement, data, type) {
            _SELECT.callChange($selectElement, function () {
                var template = "";

                if (type === undefined || type === "ALL") {
                    template += "<option value=''>전체</option>";
                } else if (type === "CHOICE") {
                    template += "<option value=''>선택</option>";
                } else {
                    template += "<option value=''>" + type + "</option>";
                }
                $.each(data, function (index, row) {
                    template += "<option value='" + row.value + "'>" + row.text + "</option>";
                });

                $selectElement.html(template);
            });
        },

        /**
         * @function disabled
         * @description HTMLSelectElement 의 비활성 여부를 설정한다.
         * @example <caption>HTML:</caption>
         * <select id="select1">
         *     <option value="value1">text1</option>
         *     <option value="value2" selected>text2</option>
         * </select>
         * @example <caption>JAVAScript:</caption>
         * var select1 = document.getElementById("select1");
         * _SELECT.disabled($(select1), true);
         * @param {jQuery} $selectElement HTMLSelectElement 가 포함된 jQuery 객체
         * @param {boolean} disabled 비활성여부
         */
        disabled: function ($selectElement, disabled) {
            $selectElement.prop("disabled", disabled);
        },

        /**
         * @function toggleDisabled
         * @description HTMLSelectElement 의 비활성 여부를 뒤바꾼다.
         * @example <caption>HTML:</caption>
         * <select id="select1">
         *     <option value="value1">text1</option>
         *     <option value="value2" selected>text2</option>
         * </select>
         * @example <caption>JAVAScript:</caption>
         * var select1 = document.getElementById("select1");
         * _SELECT.toggleDisabled($(select1));
         * @param {jQuery} $selectElement HTMLSelectElement 가 포함된 jQuery 객체
         */
        toggleDisabled: function ($selectElement) {
            $selectElement.prop("disabled", !$selectElement.prop("disabled"));
        }
    };
})(window, window["jQuery"]);

/**
 * @file 기간 입력 항목 관련
 * @requires module:_DATES
 * @requires module:_FORM
 * @module _DATERANGEPICKER
 */
(function (window, _FORM) {
    "use strict";
    var pluginName = "_DATERANGEPICKER";

    if (!window.hasOwnProperty(pluginName) || null == window[pluginName]) window[pluginName] = {
        /**
         * @function initialize
         * @description HTMLInputElement 에 기간을 입력할 수 있게 설정한다.
         * @example <caption>HTML:</caption>
         * <input type="text" id="range1" />
         * @example <caption>JAVAScript:</caption>
         * var range1 = document.getElementById("range1");
         * _DATERANGEPICKER.initialize($(range1));
         * @param {jQuery} $inputElement HTMLInputElement 가 포함된 jQuery 객체
         */
        initialize: function ($inputElement) {
            const defaultConfig = {
                "locale": {
                    "format": _DATES.DEFAULT_FORMAT,
                    "separator": " ~ ",
                    "applyLabel": _i18n.t("적용"),
                    "cancelLabel": _i18n.t("취소"),
                    "daysOfWeek": ["일", "월", "화", "수", "목", "금", "토"],
                    "monthNames": ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"]
                },
                "minDate": "1900-01-01"
                // "linkedCalendars": false // 직접 입력시 bug 있음
            };

            _FORM.daterangepicker($inputElement.get(0), $.extend(true, defaultConfig));
        },

        /**
         * @function clear
         * @description data-start-date 및 data-end-date 데이터 속성값을 이용하여 value 속성값을 되돌린다.
         * @example <caption>HTML:</caption>
         * <input type="text" id="range1" data-start-date="-1m,-6d" data-end-date="-1m" />
         * @example <caption>JAVAScript:</caption>
         * var range1 = document.getElementById("range1");
         * _DATERANGEPICKER.clear($(range1));
         * @param {jQuery} $inputElement HTMLInputElement 가 포함된 jQuery 객체
         */
        clear: function ($inputElement) {
            $inputElement.data("daterangepicker").setStartDate(_DATES.parseDate($inputElement.attr("data-start-date")));
            $inputElement.data("daterangepicker").setEndDate(_DATES.parseDate($inputElement.attr("data-end-date")));
        },

        /**
         * @function change
         * @description change Event 발생시 호출되는 함수를 설정한다.
         * @example <caption>HTML:</caption>
         * <input type="text" id="range1" />
         * @example <caption>JAVAScript:</caption>
         * var range1 = document.getElementById("range1");
         * _DATERANGEPICKER.change($(range), function (event) {
         *     console.log("change: ", $(this).val());
         * });
         * @param {jQuery} $inputElement HTMLInputElement 가 포함된 jQuery 객체
         * @param {function} callback change Event 발생시 호출되는 함수, ex.) function (event) {console.log("change: " + JSON.stringify(event));}
         * @param {boolean} [addEvent=false] true 를 입력하면, change Event 발생시 호출되는 함수를 새로 추가한다.
         */
        change: function ($inputElement, callback, addEvent) {
            if (true !== addEvent) $inputElement.off('apply.daterangepicker');
            $inputElement.on('apply.daterangepicker', callback);
        }
    };
})(window, window["_FORM"]);

// jQuery datatable 관련
/**
 * @function module:jQuery~initializeDataTable
 * @see https://datatables.net/
 * @description HTMLTableElement 를 DataTable 로 설정한다.
 * @example <caption>HTML:</caption>
 * <table id="table1">
 *     <thead>
 *         <tr>
 *             <td>Column1</td>
 *             <td>Column2</td>
 *         </tr>
 *     </thead>
 * </table>
 * @example <caption>JAVAScript:</caption>
 * $("#table1").initializeDataTable({
 *     columns: [
 *         {data: "column1"},
 *         {data: "column2", render: (cellData, type, rowData) => {
 *             if ("Y" === cellData) return '<span class="badge badge-primary">그룹</span> ' + rowData.column3;
 *             return '<span class="badge badge-success">일반</span> ' + rowData.column3;
 *         }}
 *     ]
 * });
 * @param {{}} options JSON 타입의 부가 정보, 참고) https://datatables.net/reference/option/
 * @param {array} options.columns 배열 타입의 column Mapping 정보 ex.) {columns: [{data: "data1", render: function () {}}]}
 * @param {string} options.columns.data JSON 타입의 데이터내 key
 * @param {function} options.columns.render 데이터의 사용자정의 출력 처리 함수, 참고) function (cellData, type, rowData) {return cellData;}
 * @param {object} options.columns.render.cellData 데이터
 * @param {string} options.columns.render.type 타입, ex.) "filter", "display", "sort"
 * @param {{}} options.columns.render.rowData JSON 타입의 행 데이터
 * @requires jQuery.dataTable
 * @returns {jQuery} datatable 가 포함된 jQuery 객체
 */
$.fn.initializeDataTable = function (options) {
    const $this = this;

    if (options.afterDraw !== undefined) {
        options.drawCallback = function () {
            options.afterDraw.apply();
        }
    }

    return $this.scope(SCOPE.DATATABLE).dataTable($.extend(true, {
        responsive: true,
        language: {
            // "aria": {
            //     "sortAscending": ": activate to sort column ascending",
            //     "sortDescending": ": activate to sort column descending"
            // },
            // "paginate": {
            //     "first": "First",
            //     "last": "Last",
            //     "next": "Next",
            //     "previous": "Previous"
            // },
            "emptyTable": _i18n.t("No data available in table"),
            "info": _i18n.t("Showing _START_ to _END_ of _TOTAL_ entries"),
            "infoEmpty": _i18n.t("Showing 0 to 0 of 0 entries"),
            "infoFiltered": "(" + _i18n.t("filtered from _MAX_ total entries") + ")",
            // "infoPostFix": "",
            // "decimal": "",
            // "thousands": ",",
            "lengthMenu": _i18n.t("Show _MENU_ entries"),
            // "loadingRecords": "Loading...",
            // "processing": "Processing...",
            // "search": "Search:",
            "searchPlaceholder": _i18n.t("Search within Results"),
            // "url": "",
            "zeroRecords": _i18n.t("No records to display")
        },
        order: [],
        fixedHeader: true
    }, options));
};

/**
 * @file 지정된 영역에 파일 drag & drop 으로 파일 첨부
 * @see https://api.jquery.com/
 * @see https://www.dropzonejs.com/
 * @requires jQuery
 * @requires Dropzone
 * @requires module:~TOAST
 * @module _DROPZONE
 */
(function (window, $) {
    "use strict";
    var pluginName = "_DROPZONE";

    if (!window.hasOwnProperty(pluginName) || null == window[pluginName]) window[pluginName] = {
        /**
         * @function setOptions
         * @description Dropzone plugin 초기화에 필요한 값을 설정한다; 주의) 화면로드시 내부적으로 Dropzone plugin 을 초기화하므로 _DROPZONE.setOptions() 함수를 $(document).ready() event 에 넣지 않는다.
         * @example <caption>HTML:</caption>
         * <form id="myDropzone" class="dropzone needsclick dz-started" data-toggle="popover" data-trigger="hover" data-placement="bottom" th:data-content="|#{Drop files here to upload}.|">
         *     <div class="dropzone-previews d-none"></div>
         *     <div class="dz-message needsclick d-none">
         *         <i class="fal fa-cloud-upload text-muted mb-3"></i> <br>
         *         <span class="text-uppercase">Drop files here to upload.</span>
         *     </div>
         *     ...
         *     <div class="row">
         *         <div class="col-lg-12">
         *             <div class="grey-label" th:text="#{제목}">제목</div>
         *             <div class="grid-cell">
         *                 <input data-field="subject" maxlength="50" type="text" class="form-control form-control-sm" />
         *             </div>
         *         </div>
         *     </div>
         *     <div class="row">
         *         <div class="col-lg-12">
         *             <div class="grey-label" th:text="#{내용}">내용</div>
         *             <div class="grid-cell">
         *                 <input data-field="contents" maxlength="2000" type="text" class="form-control form-control-sm" />
         *             </div>
         *         </div>
         *     </div>
         *     ...
         * </form>
         * <div class="d-none">
         *     <input id="limitSize" th:value="2" type="hidden" /><!-- 첨부 건별 사이즈 제한 -->
         *     <input id="limitCnt" th:value="10" type="hidden" /><!-- 첨부 건수 제한 -->
         *     <input id="customFileMessage" value="파일첨부는 최대 2MB / 10개 파일만 업로드 가능합니다." type="hidden" />
         *
         *     <!-- 첨부하기 버튼용 -->
         *     <form id="attachForm">
         *         <input name="files" type="file" id="customFile" multiple /><!-- name 속성값은 files 로 입력해야 한다. -->
         *     </form>
         * </div>
         * @example <caption>JAVAScript:</caption>
         * <script>
         *     const ModalScope = {
         *         attachmentScope: {
         *             $list: [],
         *             list: {
         *                 add: function (_this, data) {
         *                     _this.attachmentScope.$list.push(data);
         *                 }
         *             }
         *         }
         *     };
         *
         *     _DROPZONE.setOptions({
         *         attachedCount: function () {return ModalScope.attachmentScope.$list.length;},
         *         successCallback: function (resultList) {
         *             $.each(resultList, (index, rowData) => {
         *                 _AJAX.GUID((newGUID) => {
         *                     ModalScope.attachmentScope.list.add(ModalScope, {
         *                         "pdsAttachUid": newGUID,
         *                         "attachUid": rowData["attachUid"],
         *                         "originalFileName": rowData["originalFileName"],
         *                         "fileSize": rowData["fileSize"],
         *                         "carryOutPassword": rowData["carryOutPassword"],
         *                         "carryOutYn": rowData["carryOutYn"]
         *                     });
         *                     _TOAST.info("파일 첨부가 완료되었습니다.");
         *                 });
         *             });
         *         }
         *     }, {
         *         maxFilesize: parseInt($("#limitSize").val(), 10), // 첨부 파일 크기 제한
         *         dictFileTooBig: $("#customFileMessage").val(), // 첨부 파일 크기 오류메시지
         *         maxFiles: parseInt($("#limitCnt").val(), 10), // 첨부 파일 갯수 제한
         *         dictMaxFilesExceeded: $("#customFileMessage").val() // 첨부 파일 갯수 오류메시지
         *     });
         * </script>
         * @param {{}} aCustomized JSON 타입의 사용자정의 부가 정보
         * @param {string} [aCustomized.elementId="myDropzone"] Dropzone plugin 이 적용될 HTMLFormElement 의 id 속성값
         * @param {function} aCustomized.attachedCount 첨부 파일 갯수 초과 여부 검증시 참조할 현재 첨부 건수 값을 return 하는 함수
         * @param {function} aCustomized.successCallback 파일 첨부 성공시 호출될 함수; 참고) function (resultList) {}
         * @param {array} aCustomized.successCallback.resultList 배열 타입의 파일 첨부 결과 데이터; 참고) [{attachUid: "(첨부 식별자)", originalFileName: "(원본파일명)", fileSize: (파일크기), carryOutPassword: "(반출압축파일비밀번호)", carryOutYn: "(반출여부)"}]
         * @param {{}} options JSON 타입의 Dropzone plugin 부가 정보; https://www.dropzonejs.com/#configuration-options 참조
         * @param {number} options.maxFilesize 첨부 파일 크기 제한; 단위: MB
         * @param {string} options.dictFileTooBig 첨부 파일 크기 오류메시지
         * @param {number} [options.maxFiles=1] 첨부 파일 갯수 제한
         * @param {string} options.dictMaxFilesExceeded 첨부 파일 갯수 오류메시지
         */
        setOptions: function (aCustomized, options) {
            const newCustomized = $.extend({
                elementId: "myDropzone",
                attachedCount: function () {return 0;},
                successCallback: function (resultList) {
                    console.log("$$ resultList: " + JSON.stringify(resultList));
                    _TOAST.info(_i18n.t("파일-첨부가-완료되었습니다-"));
                }
            }, aCustomized);
            const newMaxFiles = (null != options && null != options["maxFiles"] ? options["maxFiles"] : 1);

            if (!window.hasOwnProperty("Dropzone")) {
                console.error("dropzone.js 파일을 include 해야 이용할 수 있는 함수입니다.");
                return;
            }

            let attachConfigUrl = "/api/system/attachment";

            if(location.pathname.indexOf("/draft/") == 0) {
                let channelId = $('input[data-field=channelId]').val();
                if(channelId && channelId.length > 0) attachConfigUrl = "/api/approval/attachment/".concat(channelId);
            }
            Dropzone.options[newCustomized.elementId] = new Dropzone(`#${newCustomized.elementId}`, $.extend({
                url: attachConfigUrl,
                paramName: "files",
                parallelUploads: 1,
                clickable: false,
                createImageThumbnails: false,
                previewsContainer: `#${newCustomized.elementId}>.dropzone-previews`,
                maxFiles: newMaxFiles,
                maxFilesize : options.totalLimitSize ,
                accept: function (file, done) {

                    const currentFiles = newCustomized.attachedCount() + this.getAcceptedFiles().length;
                    console.log(`$$ ${newMaxFiles} / ${currentFiles} = ${newMaxFiles} / ${currentFiles}`);
                    console.log(`$$ ${options.maxFilesize} / ${file.size} =  ${options.maxFilesize}, ${file.size}`);

                    const beforeTotal = options.attachmentFile.map((f) => f.fileSize).reduce((a1, a2) => a1 + a2, 0);
                    if (newMaxFiles <= currentFiles) {
                        done(options.dictMaxFilesExceeded); /* 오류 */
                        return;
                    }
                    if (options.maxFilesize <= file.size
                        || options.totalLimitSize  <= beforeTotal + file.size) {
                        done(options.dictFileTooBig); /* 오류 */
                        return;
                    }
                    done(); /* 정상 */
                },
                error: function (file, errorMessage/* , xhr */) {
                    _TOAST.error(errorMessage);
                },
                success: function (file, response/* , progressEvent */) {
                    this.removeFile(file);
                    if ("SUCCESS" === response["apiStatus"] && null != response["resultList"] && 0 < response["resultList"].length) {
                        newCustomized.successCallback(response["resultList"]);
                        return;
                    }
                    _TOAST.error(response.message);
                }
            }, options));

    }
};
})(window, window["jQuery"]);

/**
 * @file 지정된 테이블의 행별 데이터를 JSON 데이터로 만든다.
 */
$.fn.tableToList = function () {
    let obj = $(this);
    let tagName = obj.prop('tagName').toLowerCase();
    if(tagName=='table') obj = obj.find('tbody');
    //alert(obj.prop('tagName').toLowerCase());
    let list = [];
    $.each(obj.find('tr'), function(idx1, row) {
        let rowdata = {};
        $.each( $(row).find('[data-field]'), function(idx2, field) {
            let fieldTagName = $(field).prop('tagName').toLowerCase();
            let fieldName	= $(field).attr('data-field');
            let fieldValue	= (fieldTagName=='input' || fieldTagName=='select' || fieldTagName=='textarea')? $(field).val() : $(field).text();
            rowdata[fieldName] = fieldValue;
        });
        if (!jQuery.isEmptyObject(rowdata)){
            list.push(rowdata);
        }
    })

    return list;
};

/**
 * @function clickRowButton
 * @description data-button 데이터 속성값이 일치하는 HTMLButtonElement 에 대하여 click Event 발생시 호출되는 함수를 설정하거나, click Event 를 발생한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-button 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="button" data-button="target1" value="Button1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").clickRowButton("target1", function (event) {
 *     console.log("click: " + JSON.stringify(event));
 * });
 * $.scope("scope1").clickRowButton("target1");
 * @param {string} buttonName 검색할 data-button 데이터 속성값
 * @param {function} [callBack] click Event 발생시 호출되는 함수(미입력시 click Event 발생), ex.) function (event) {}
 */
$.fn.clickRowButton = function (buttonName, clickRowButtonCallback) {
    this.on("click", "tbody > tr *[data-button=" + buttonName + "]", function () {
        clickRowButtonCallback( $(this) );
    });
};

/**
 * @function checkDataDup
 * @description data-button 데이터 속성값이 일치하는 HTMLButtonElement 에 대하여 click Event 발생시 호출되는 함수를 설정하거나, click Event 를 발생한다.
 * @example <caption>HTML:</caption>
 * <!-- data-scope 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <!-- data-button 데이터 속성 - 식별자로 이용하며, id 속성과 다르게 중복된 속성값을 입력 가능 -->
 * <div data-scope="scope1">
 *     <input type="button" data-button="target1" value="Button1" />
 * </div>
 * @example <caption>JAVAScript:</caption>
 * $.scope("scope1").clickRowButton("target1", function (event) {
 *     console.log("click: " + JSON.stringify(event));
 * });
 * $.scope("scope1").checkDataDup("target1");
 * @param {string} fieldName 검색할 data-button 데이터 속성값
 * @param {function} [value] click Event 발생시 호출되는 함수(미입력시 click Event 발생), ex.) function (event) {}
 */
$.fn.checkDataDup = function (fieldName, value) {
    let rowList = $(this).tableToList();
    let isExist = false;
    $.each(rowList, function(idx, item) {
        if(item[fieldName]==value) isExist = true;
    });

    return isExist;
};


/**
 *  @function i18nTreeChildrenText
 *  @description 트리의 자식노드의 text를 i18n 처리한다.
 *  @param {object} e 트리의 자식노드
 *  @example
 *  i18nTreeChildrenText(e);
 *  @returns {void}
 *  @since 2023. 05. 12
 */
function i18nTreeChildrenText(e) {
    if (!(e.children === undefined || e.children === null)) {
        for (let i = 0; i < e.children.length; i++) {
            if (!(e.children[i].children === undefined || e.children[i].children === null)){
                e.children[i].text = _i18n.t(e.children[i].text);
                i18nTreeChildrenText(e.children[i]);
            }else{
                e.children[i].text = _i18n.t(e.children[i].text);
            }
        }
    }
}
