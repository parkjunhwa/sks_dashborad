$(document).ready(() => {
});

const Icon = {
    init: function (type, prefix, prefix_extend, filename) {
        if (type === undefined) type = "PAGE";

        /*execute code*/
        $.getJSON(filename + ".json").then(function (data) {

            /*...worked*/
            var formatedDOMElms = [];

            /*compile DOM elements*/
            jQuery.each(data, function (index, item) {
                formatedDOMElms.push('<div class="col-4 col-sm-3 col-md-3 col-lg-2 col-xl-1 d-flex justify-content-center align-items-center mb-g">\
                                            <a href="javascript:void(0);" class="' + prefix + '-icon rounded bg-white p-0 m-0 d-flex flex-column w-100 h-100 js-showcase-icon shadow-hover-2" data-clipboard-text="' + prefix + ' ' + prefix_extend + item + '" data-filter-tags=' + item.substring(1) + '>\
                                                <div class="rounded-top color-fusion-300 w-100 bg-primary-300">\
                                                    <div class="rounded-top d-flex align-items-center justify-content-center w-100 pt-3 pb-3 pr-2 pl-2 fa-3x hover-bg">\
                                                        <i class="' + prefix + ' ' + prefix_extend + item + '"></i>\
                                                    </div>\
                                                </div>\
                                                <div class="rounded-bottom p-1 w-100 d-flex justify-content-center align-items-center text-center">\
                                                    <span class="d-block text-truncate text-muted">' + item.substring(1) + '</span>\
                                                </div>\
                                            </a>\
                                        </div>');
            });

            /* append to HTML dom*/
            $('#' + prefix + '-icon-list').append(formatedDOMElms.join(" "));

            /*initialize filter*/
            initApp.listFilter($('#' + prefix + '-icon-list'), $('#' + prefix + '-filter-icon'));

            /*add number of icons*/
            $('#' + prefix + '-filter-icon').attr('placeholder', "Search " + data.length + " icons for")

            if (type === "PAGE") {
                const clipboards = new ClipboardJS('.' + prefix + '-icon');

                clipboards.on("success", () => {
                    _TOAST.success("Copied!");
                });
            } else {
                $('#' + prefix + '-icon-list').slimscroll({height: "500px"});

                $('#' + prefix + '-icon-list').find("." + prefix + "-icon").click(function () {
                    const _that = $(this);

                    IconModal.methods.click(_that.data("clipboard-text"));
                });
            }
        }).fail(function () {
            console.log("failed")
        });
    }
};

const FontAwesomeLight = {
    $el: $.scope("font-awesome-light"),

    state: {
        init: false
    },

    /**
     * @param type :: 호출 구분, PAGE - 페이지에서 호출, MODAL - 모달에서 호출
     * @description 호출 구분에 따라서, 클릭시 이벤트를 구분.
     */
    init: function (type) {
        const _this = this;

        if (!_this.state.init) {
            Icon.init(type,"fal", "fa", "/media/data/fa-icon-list");

            _this.$el.hideButton("init");

            _this.state.init = true;
        }
    }
};

const FontAwesomeRegular = {
    $el: $.scope("font-awesome-regular"),

    state: {
        init: false
    },

    /**
     * @param type :: 호출 구분, PAGE - 페이지에서 호출, MODAL - 모달에서 호출
     * @description 호출 구분에 따라서, 클릭시 이벤트를 구분.
     */
    init: function (type) {
        const _this = this;

        if (!_this.state.init) {
            Icon.init(type, "far", "fa", "/media/data/fa-icon-list");

            _this.$el.hideButton("init");

            _this.state.init = true;
        }
    }
};

const FontAwesomeSolid = {
    $el: $.scope("font-awesome-solid"),

    state: {
        init: false
    },

    init: function (type) {
        const _this = this;

        if (!_this.state.init) {
            Icon.init(type,"fas", "fa", "/media/data/fa-icon-list");

            _this.$el.hideButton("init");

            _this.state.init = true;
        }
    }
};

const FontAwesomeDuotone = {
    $el: $.scope("font-awesome-duotone"),

    state: {
        init: false
    },

     /**
     * @param type :: 호출 구분, PAGE - 페이지에서 호출, MODAL - 모달에서 호출
     * @description 호출 구분에 따라서, 클릭시 이벤트를 구분.
     */
    init: function (type) {
        const _this = this;

        if (!_this.state.init) {
            Icon.init(type, "fad", "fa", "/media/data/fa-duotone");

            _this.$el.hideButton("init");

            _this.state.init = true;
        }
    }
};

const FontAwesomeBrand = {
    $el: $.scope("font-awesome-brand"),

    state: {
        init: false
    },

    /**
     * @param type :: 호출 구분, PAGE - 페이지에서 호출, MODAL - 모달에서 호출
     * @description 호출 구분에 따라서, 클릭시 이벤트를 구분.
     */
    init: function (type) {
        const _this = this;

        if (!_this.state.init) {
            Icon.init(type, "fab", "fa", "/media/data/fa-brand-list");

            _this.$el.hideButton("init");

            _this.state.init = true;
        }
    }
};

const NextGenIconsGenerals = {
    $el: $.scope("nextgen-icons"),

    state: {
        init: false
    },

    /**
     * @param type :: 호출 구분, PAGE - 페이지에서 호출, MODAL - 모달에서 호출
     * @description 호출 구분에 따라서, 클릭시 이벤트를 구분.
     */
    init: function (type) {
        const _this = this;

        if (!_this.state.init) {
            Icon.init(type, "ni", "ni", "/media/data/ng-icon-list");

            _this.$el.hideButton("init");

            _this.state.init = true;
        }
    }
};