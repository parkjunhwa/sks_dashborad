const WidgetCommonConfig = {
    reload: function (_this) {
        if (_this.main.config.hasOwnProperty("title")) {
            const title = _this.main.config.title;

            _this.$el.scope("MODAL_TITLE").html("<i class='fad fa-cogs mr-1'></i>" + title);
            _this.$el.setFieldValue("TITLE", title);
        }

        if (_this.main.config.hasOwnProperty("color")) {
            const color = _this.main.config.color;

            $.each(_this.$el.find("[data-color]"), function () {
                const _that = $(this);

                if (_that.data("color") === color) {
                    WidgetCommonConfig.methods.clickColorBox(_this, _that);
                }
            });

            // #으로 시작하면, 커스텀 컬러가 지정된것이므로, 커스텀 컬러 박스에 선택 효과를 주고 값을 설정한다.
            if (v.startsWith(color, "#")) {
                const $customColor = $("div[data-color=custom]");
                WidgetCommonConfig.methods.clickColorBox(_this, $customColor);
                $customColor.find("input").val(v.replace(color, "#", ""));
                $customColor.find("span").css("backgroundColor", color).css("borderColor", color).addClass("bg-custom");
            }
        }

        if (_this.main.config.hasOwnProperty("borderColor")) {
            const borderColor = _this.main.config.borderColor;

            // 지정된 컬러중 선택되면, 해당 컬러 박스를 클릭해 준다.
            $.each(_this.$el.find("[data-border-color]"), function () {
                const _that = $(this);

                if (_that.data("border-color") === borderColor) {
                    WidgetCommonConfig.methods.clickColorBox(_this, _that);
                }
            });

            // #으로 시작하면, 커스텀 컬러가 지정된것이므로, 커스텀 컬러 박스에 선택 효과를 주고 값을 설정한다.
            if (v.startsWith(borderColor, "#")) {
                const $customBorderColor = $("div[data-border-color=custom]");
                WidgetCommonConfig.methods.clickColorBox(_this, $customBorderColor);
                $customBorderColor.find("span").css("backgroundColor", borderColor).css("borderColor", borderColor).addClass("bg-custom");
                $customBorderColor.find("input").val(v.replace(borderColor, "#", ""));
            }
        }

        if (_this.main.config.hasOwnProperty("borderStyle")) {
            const borderStyle = _this.main.config.borderStyle;

            _this.$el.setFieldValue("BORDER_STYLE", borderStyle);
        }

        if (_this.main.config.hasOwnProperty("borderWeight")) {
            const borderWeight = _this.main.config.borderWeight;

            _this.$el.setFieldValue("BORDER_WEIGHT", borderWeight);
        }

        if (_this.main.config.hasOwnProperty("textColor")) {
            const textColor = _this.main.config.textColor;

            // 지정된 컬러중 선택되면, 해당 컬러 박스를 클릭해 준다.
            $.each(_this.$el.find("[data-text-color]"), function () {
                const _that = $(this);

                if (_that.data("text-color") === textColor) {
                    WidgetCommonConfig.methods.clickColorBox(_this, _that);
                }
            });

            // #으로 시작하면, 커스텀 컬러가 지정된것이므로, 커스텀 컬러 박스에 선택 효과를 주고 값을 설정한다.
            if (v.startsWith(textColor, "#")) {
                const $customTextColor = $("div[data-text-color=custom]");
                WidgetCommonConfig.methods.clickColorBox(_this, $customTextColor);
                $customTextColor.find("input").val(v.replace(textColor, "#", ""));
                $customTextColor.find("span").css("backgroundColor", textColor).css("borderColor", textColor).addClass("bg-custom");
            }
        }

        if (_this.main.config.hasOwnProperty("icon")) {
            const iconClass = _this.main.config.icon;

            WidgetCommonConfig.methods.changeIcon(_this, iconClass);
        }

        if (_this.main.config.hasOwnProperty("iconSize")) {
            const iconSize = _this.main.config.iconSize;

            _this.$el.setFieldValue("ICON_SIZE", iconSize);
        }

        if (_this.main.config.hasOwnProperty("content")) {
            const content = _this.main.config.content;

            _this.$el.setFieldValue("CONTENT", content);
        }

        if (_this.main.config.hasOwnProperty("link")) {
            const link = _this.main.config.link;

            _this.$el.setFieldValue("LINK", link);
        }
    },

    bind: {
        fields: function (_this) {
            _this.$el.find("[data-color]").click(function () {
                const _that = $(this);

                WidgetCommonConfig.methods.clickColorBox(_this, _that);
            });

            // Color 컬러코드 직접 입력시..
            _this.$el.find("div[data-color] input").keyup(function () {
                const _that = $(this);

                _that.parent().find("span").css("backgroundColor", `#${_that.val()}`).css("borderColor", `#${_that.val()}`).addClass("bg-custom");
            });

            _this.$el.find("[data-border-color]").click(function () {
                const _that = $(this);

                WidgetCommonConfig.methods.clickColorBox(_this, _that);
            });

            // Border Color 컬러코드 직접 입력시..
            _this.$el.find("div[data-border-color] input").keyup(function () {
                const _that = $(this);

                _that.parent().find("span").css("backgroundColor", `#${_that.val()}`).css("borderColor", `#${_that.val()}`).addClass("bg-custom");
            });

            _this.$el.find("[data-text-color]").click(function () {
                const _that = $(this);

                WidgetCommonConfig.methods.clickColorBox(_this, _that);
            });

            // Text Color 컬러코드 직접 입력시..
            _this.$el.find("div[data-text-color] input").keyup(function () {
                const _that = $(this);

                _that.parent().find("span").css("backgroundColor", `#${_that.val()}`).css("borderColor", `#${_that.val()}`).addClass("bg-custom");
            });
        },

        buttons: function (_this) {
            if (_this.$el.hasButton("iconSearch")) {
                _this.$el.clickButton("iconSearch", function () {
                    IconModal.open(_this);
                });
            }

            if (_this.$el.hasButton("save")) {
                _this.$el.clickButton("save", function () {
                    if (_this.$el.hasField("ICON_SIZE")) {
                        const iconSize = _this.$el.getFieldValue("ICON_SIZE");

                        if (v.isBlank(iconSize) || isNaN(iconSize)) {
                            _ALERT.error(_i18n.t("Icon-Size를-숫자로-입력하세요-"));

                            return;
                        }
                    }

                    // Color를 Custom으로 선택했을때
                    if (_this.$el.find("div[data-color=custom]").length > 0 && _this.$el.find("div[data-color=custom]").hasClass("color-palette-selected")) {
                        if (_this.$el.find("div[data-color=custom] input").val().length < 6) {
                            _ALERT.msg(_i18n.t("컬러코드를-6자리-입력하세요-"), function () {
                                _this.$el.find("div[data-color=custom] input").focus();
                            });
                            return;
                        }
                        _this.$el.setFieldValue("COLOR", `#${_this.$el.find("div[data-color=custom] input").val()}`);
                    }

                    // Border Color를 Custom으로 선택했을때
                    if (_this.$el.find("div[data-border-color=custom]").length > 0 && _this.$el.find("div[data-border-color=custom]").hasClass("color-palette-selected")) {
                        if (_this.$el.find("div[data-border-color=custom] input").val().length < 6) {
                            _ALERT.msg(_i18n.t("컬러코드를-6자리-입력하세요-"), function () {
                                _this.$el.find("div[data-border-color=custom] input").focus();
                            });
                            return;
                        }
                        _this.$el.setFieldValue("BORDER_COLOR", `#${_this.$el.find("div[data-border-color=custom] input").val()}`);
                    }

                    // Text Color를 Custom으로 선택했을때
                    if (_this.$el.find("div[data-text-color=custom]").length > 0 && _this.$el.find("div[data-text-color=custom]").hasClass("color-palette-selected")) {
                        if (_this.$el.find("div[data-text-color=custom] input").val().length < 6) {
                            _ALERT.msg(_i18n.t("컬러코드를-6자리로-입력하세요-"), function () {
                                _this.$el.find("div[data-text-color=custom] input").focus();
                            });
                            return;
                        }
                        _this.$el.setFieldValue("TEXT_COLOR", `#${_this.$el.find("div[data-text-color=custom] input").val()}`);
                    }

                    _ALERT.confirm(_i18n.t("저장하시겠습니까-"), () => {
                        WidgetCommonConfig.methods.saveConfig(_this);
                    });
                });
            }
        }
    },

    methods: {
        changeBackgroundColor: (_this, backgroundColor) => {
            if (v.startsWith(backgroundColor, "#")) {
                // 이미 지정되어 있던 클래스는 제거 한다.
                _this.$el.scope("BODY").removeClass(_this.config.color);
                // #으로 시작하면, 커스텀 컬러가 지정된것이므로, 커스텀 컬러 박스에 선택 효과를 주고 값을 설정한다.
                _this.$el.scope("BODY").css("backgroundColor", `${backgroundColor}`);
            } else {
                // 이미 지정되어 있던 클래스는 제거 한다.
                _this.$el.scope("BODY").css("backgroundColor", "");
                // #으로 시작하지 않으면 클래스가 지정된 것이므로 해당 클래스를 지정한다.
                _this.$el.scope("BODY").removeClass(_this.config.color).addClass(backgroundColor);
            }
        },

        changeBorderColor: (_this, borderColor) => {
            if (v.startsWith(borderColor, "#")) {
                // 이미 지정되어 있던 클래스는 제거 한다.
                _this.$el.scope("BODY").removeClass(_this.config.borderColor);
                // #으로 시작하면, 커스텀 컬러가 지정된것이므로, 커스텀 컬러 박스에 선택 효과를 주고 값을 설정한다.
                _this.$el.scope("BODY").css("borderColor", `${borderColor}`);
            } else {
                // 이미 지정되어 있던 클래스는 제거 한다.
                _this.$el.scope("BODY").css("borderColor", "");
                // #으로 시작하지 않으면 클래스가 지정된 것이므로 해당 클래스를 지정한다.
                _this.$el.scope("BODY").removeClass(_this.config.borderColor).addClass(borderColor);
            }
        },

        changeTextColor: (_this, textColor) => {
            if (v.startsWith(textColor, "#")) {
                // 이미 지정되어 있던 클래스는 제거 한다.
                _this.$el.scope("BODY").removeClass(_this.config.textColor);
                // #으로 시작하면, 커스텀 컬러가 지정된것이므로, 커스텀 컬러 박스에 선택 효과를 주고 값을 설정한다.
                _this.$el.scope("BODY").css("color", `${textColor}`);
            } else {
                // 이미 지정되어 있던 클래스는 제거 한다.
                _this.$el.scope("BODY").css("color", "");
                // #으로 시작하지 않으면 클래스가 지정된 것이므로 해당 클래스를 지정한다.
                _this.$el.scope("BODY").removeClass(_this.config.textColor).addClass(textColor);
            }
        },

        changeIcon: function (_this, iconClass) {
            const $iconClass = _this.$el.getField("ICON");

            $iconClass.val(iconClass);
            $iconClass.prev().find("i").removeClass(_this.main.config.icon).addClass(iconClass);
        },

        clickColorBox: function (_this, _that) {
            _that.siblings().removeClass("color-palette-selected");
            _that.addClass("color-palette-selected");

            _that.blur();

            if (_that.is("[data-color]")) {
                if (_that.prop("tagName") === "A") {
                    _this.$el.setFieldValue("COLOR", _that.data("color"));
                    // 선택된 색상이 커스텀 색상이 아니면, 커스텀 색상 입력지 색상 및 컬러 코드를 삭제한다.
                    _this.$el.find("div[data-color] input").val("");
                    _this.$el.find("div[data-color] span").css("backgroundColor", "").css("borderColor", "");
                }
            } else if (_that.is("[data-border-color]")) {
                if (_that.prop("tagName") === "A") {
                    _this.$el.setFieldValue("BORDER_COLOR", _that.data("border-color"));
                    // 선택된 색상이 커스텀 색상이 아니면, 커스텀 색상 입력지 색상 및 컬러 코드를 삭제한다.
                    _this.$el.find("div[data-border-color] input").val("");
                    _this.$el.find("div[data-border-color] span").css("backgroundColor", "").css("borderColor", "");
                }
            } else if (_that.is("[data-text-color]")) {
                if (_that.prop("tagName") === "A") {
                    _this.$el.setFieldValue("TEXT_COLOR", _that.data("text-color"));
                    // 선택된 색상이 커스텀 색상이 아니면, 커스텀 색상 입력지 색상 및 컬러 코드를 삭제한다.
                    _this.$el.find("div[data-text-color] input").val("");
                    _this.$el.find("div[data-text-color] span").css("backgroundColor", "").css("borderColor", "");
                }
            }
        },

        saveConfig: function (_this) {
            const COMMAND = {
                configList: []
            };

            const FIELD_PARAMETERS = _this.$el.getFieldParameters();

            for (const [key, value] of Object.entries(FIELD_PARAMETERS)) {
                COMMAND.configList.push({widgetId: _this.main.config.widgetId, configId: key, configData: value});
            }

            _AJAX.put({
                url: "/system/widget/config",
                data: COMMAND,
                success: function () {
                    WidgetCommon.methods.changeConfig(_this.main, FIELD_PARAMETERS);

                    _ALERT.msg(_i18n.t("저장이-완료되었습니다-"));

                    _this.close();
                }
            });
        }
    }
};