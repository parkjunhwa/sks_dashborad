const GridStackScope = {
    $el: $("#gridStackContainer"),

    init: function () {
        const _this = this;

        _this.methods.init(_this, (_this) => {
            _this.bind.fields(_this);
            _this.bind.buttons(_this);
        });
    },

    bind: {
        buttons: (_this) => {
            // click on/off switch
            _this.$el.find("[data-self-class]").on("click", function () {
                const $this = $(this);
                const $blockTarget = $($this.attr("data-block-target"));

                // set on/off switch
                $this.toggleClass($this.attr("data-self-class"));

                if ($this.hasClass($this.attr("data-self-class"))) {
                    // unblock on/off switch target
                    $blockTarget.unblock();
                } else {
                    // block on/off switch target
                    $blockTarget.block({message: null, overlayCSS: {cursor: "default"}});
                }
            });

            // click save
            _this.$el.scope("toolbar").clickButton("save", () => { /* 대시보드 관리 저장 button click */
                const authorityId = _this.$el.scope("toolbar").getFieldValue("authorityId", true);

                if (v.isBlank(authorityId)) {
                    _ALERT.error(_i18n.t("권한을-선택해주세요-"));
                    return;
                }

                const layout = _this.methods.getCustomizedLayout(_this);

                console.log("$$ layout: " + JSON.stringify(layout));
                _AJAX.post({
                    "url": "/api/system/authority/" + authorityId + "/page/dashboard",
                    "data": {"contents": JSON.stringify(layout)},
                    "success": () => {
                        _ALERT.msg(_i18n.t("저장이-완료되었습니다-"));
                    }
                });
            });

            // click undo
            _this.$el.scope("toolbar").clickButton("undo", () => { /* 대시보드 관리 undo button click */
                _ALERT.confirm(_i18n.t("변경-후-저장하지-않은-설정은-모두-초기화됩니다--초기화하시겠습니까-"), () => {
                    location.reload();
                });
            });

            // click delete
            _this.$el.scope("toolbar").clickButton("delete", () => { /* 대시보드 관리 삭제 button click */
                const authorityId = _this.$el.scope("toolbar").getFieldValue("authorityId", true);

                if (v.isBlank(authorityId)) {
                    _ALERT.error(_i18n.t("권한을-선택해주세요-"));
                    return;
                }

                _ALERT.confirm(_i18n.t("대시보드-설정이-삭제됩니다--삭제하시겠습니까-"), () => {
                    _AJAX.delete({
                        "url": "/api/system/authority/" + authorityId + "/page/dashboard",
                        "success": () => {
                            location.reload();
                        }
                    });
                });
            });
        },

        fields: (_this) => {
            if (DashboardGridStack.hasRole) {
                // display toolbar
                _this.$el.scope("toolbar").removeClass("hide");
                _this.$el.showButtons("widgetConfig");
            } else {
                // initialize on/off switch target
                _this.$el.find("[data-self-class]").each((index, element) => { /* find on/off switches */
                    const $btnSwitch = $(element);
                    const isOn = $btnSwitch.hasClass($btnSwitch.attr("data-self-class"));

                    // hide on/off switch
                    $btnSwitch.addClass("d-none");

                    // remove on/off witch target
                    if (isOn) {
                    } else {
                        DashboardGridStack.instance.removeWidget($($btnSwitch.attr("data-remove-target")).get(0), true, true);
                    }
                });
            }

            // change authority
            _this.$el.scope("toolbar").changeField("authorityId", function () {
                const $this = $(this);
                const currentValue = $this.val();

                if (v.isBlank(currentValue)) {
                    location.reload();
                } else {
                    $this.prop("disabled", true);

                    // remove gridstack items if unauthorized
                    console.log("$$ gridstack container count is " + _this.$el.find("[data-gs-id]").length);
                    _this.$el.find("[data-gs-id]").each((index, element) => { /* find gridstack items */
                        let authorities = null;

                        try {
                            authorities = $(element).data("gsAuthorities");
                            authorities = authorities.split("\|");
                            console.log(`$$ scope :: ` + $(element).data("scope"));
                            console.log("$$ authorities: " + authorities);
                            console.log(authorities.indexOf(currentValue));
                        } catch (exception) {
                            console.log(exception);
                        }
                        if (!$.isArray(authorities) || 0 > authorities.indexOf(currentValue)) {
                            DashboardGridStack.instance.removeWidget(element, true, true);
                        }
                    });

                    // remember gridstack layout
                    DashboardGridStack.layout = _this.methods.getCustomizedLayout(_this);
                    _AJAX.get({
                        "url": "/api/system/authority/" + currentValue + "/page/dashboard",
                        "success": (response) => {
                            console.log("$$ response: " + JSON.stringify(response));

                            if (null != response && "object" === typeof response && "contents" in response && null != response.contents) {
                                _this.methods.load(_this, JSON.parse(response.contents));

                                // remember gridstack layout
                                DashboardGridStack.layout = _this.methods.getCustomizedLayout(_this);
                            }
                        }
                    });
                }
            });
        }
    },

    methods: {
        init: (_this, consumer) => {
            // initialize gridstack
            // DashboardGridStack["instance"] = GridStack.init({cellHeight: "132px", staticGrid: !DashboardGridStack.hasRole});
            DashboardGridStack["instance"] = GridStack.init({cellHeight: "66px", staticGrid: !DashboardGridStack.hasRole});

            // remove gridstack items if unauthorized
            _this.$el.find("[data-gs-id]").each((index, element) => { /* find gridstack items */
                let authorities = $(element).data("gsAuthorities");
                authorities = authorities.split("\|");
                let hasRole = false;

                if ($.isArray(authorities)) {
                    $.each(authorities, (index, authorityId) => {
                        if (!hasRole) hasRole = (0 < _this.$el.scope("toolbar").find("[data-field=authorityId]>option[value=" + authorityId + "]").length);
                    });
                }
                if (hasRole) {
                } else {
                    DashboardGridStack.instance.removeWidget(element, true, true);
                }
            });

            if (DashboardGridStack.hasRole) {
            } else {
                if (null != DashboardGridStack.layout) {
                    _this.methods.load(_this, DashboardGridStack.layout);
                    // } else {
                    // remember gridstack layout
                    // DashboardGridStack.layout = DashboardGridStack.instance.save();
                }
            }

            consumer(_this);

            // display this element
            _this.$el.removeClass("invisible").addClass("visible");
        },

        load: (_this, layout) => {
            // load gridstack layout
            DashboardGridStack.instance.load(layout);

            // set on/off switch
            $.each(layout, (indexInArray, jsonGridStackItem) => {
                const $btnSwitch = _this.$el.find("[data-gs-id=" + jsonGridStackItem.id + "] [data-self-class]");

                if (jsonGridStackItem.customDisplay) {
                    // set on
                    if (!$btnSwitch.hasClass($btnSwitch.attr("data-self-class"))) {
                        $btnSwitch.addClass($btnSwitch.attr("data-self-class"));
                    }
                } else {
                    // set off
                    if ($btnSwitch.hasClass($btnSwitch.attr("data-self-class"))) {
                        $btnSwitch.removeClass($btnSwitch.attr("data-self-class"));
                    }
                }
            });

            if (DashboardGridStack.hasRole) {
                _this.$el.find("[data-self-class]").each((index, element) => { /* find on/off switches */
                    const $btnSwitch = $(element);
                    const isOn = $btnSwitch.hasClass($btnSwitch.attr("data-self-class"));
                    const $blockTarget = $($btnSwitch.attr("data-block-target"));

                    if (isOn) {
                        $blockTarget.unblock();
                    } else {
                        $blockTarget.block({message: null, overlayCSS: {cursor: "default"}});
                    }
                });
            }
        },

        getCustomizedLayout: (_this) => {
            // return DashboardGridStack.instance.save();
            const result = [];

            DashboardGridStack.instance.engine.nodes.forEach((node) => {
                const $btnSwitch = _this.$el.find("[data-gs-id=" + node.id + "] [data-self-class]");

                // add customDisplay
                result.push({
                    x: node.x,
                    y: node.y,
                    width: node.width,
                    height: node.height,
                    id: node.id,

                    customDisplay: $btnSwitch.hasClass($btnSwitch.attr("data-self-class"))
                });
            });
            return result;
        },

        /**
         * Panel 사이즈에 따라 Table의 row과 column이 조정된다.
         * @param {object} panelScope - Panel Scope (Not Null)
         * @param {number} width - Panel width (Not Null)
         * @param {number} height - Panel height (Not Null)
         * @param {array} hideColumns - 숨길 컬럼
         * @param {number} basisWidth - 해당 크기 이하일 경우 컬럼 숨김
         */
        resize: (panelScope, width, height, hideColumns, basisWidth) => {
            if (basisWidth === undefined) basisWidth = 399.875;

            // DashboardGridStack.instance.cellWidth(); 동적으로 한칸 크기 알아내는 함수
            // 현재화면 기준 width 1칸 : 114.25px
            // 3칸 이하 일 경우 등록일시 컬럼 hide
            // 각 칸마다 구분점은 width / 2 지점에서 구분
            // ex) basisWidth = DashboardGridStack.instance.cellWidth() * 3 + DashboardGridStack.instance.cellWidth() / 2;
            if (hideColumns) {
                if (width < basisWidth) GridStackScope.methods.hideColumn(panelScope, hideColumns);
                else GridStackScope.methods.showColumn(panelScope, hideColumns);
            }

            GridStackScope.methods.toggleRow(panelScope, height);
        },

        /**
         * 해당 Panel의 Table coulmn을 숨긴다.
         * @param {object} panelScope - Panel Scope (Not Null)
         * @param {array} columns - 숨길 컬럼 (Not Null)
         */
        hideColumn: (panelScope, columns) => {
            columns.forEach((column) => {
                panelScope.find(`table thead tr th:nth-child(${column})`).addClass("d-none");
                panelScope.find(`table thead tr th:nth-child(${column - 1})`).attr("colspan", 2);

                panelScope.find(`table tbody tr td:nth-child(${column})`).addClass("d-none");
                panelScope.find(`table tbody tr td:nth-child(${column - 1})`).attr("colspan", 2);
            });
        },

        /**
         * 해당 Panel의 Table coulmn을 보여준다.
         * @param {object} panelScope - Panel Scope (Not Null)
         * @param {array} columns - 보여줄 컬럼 (Not Null)
         */
        showColumn: (panelScope, columns) => {
            columns.forEach((column) => {
                panelScope.find(`table thead tr th:nth-child(${column})`).removeClass("d-none");
                panelScope.find(`table thead tr th:nth-child(${column - 1})`).removeAttr("colspan");

                panelScope.find(`table tbody tr td:nth-child(${column})`).removeClass("d-none");
                panelScope.find(`table tbody tr td:nth-child(${column - 1})`).removeAttr("colspan");
            });
        },

        /**
         * 해당 Panel의 높이에 따라 Table의 row를 숨김 및 추가한다.
         * @param {object} panelScope - Panel Scope (Not Null)
         * @param {number} height - Panel height (Not Null)
         */
        toggleRow: (panelScope, height) => {
            // DashboardGridStack.instance.getCellHeight(); 동적으로 한칸 높이 알아내는 함수
            // 시스템 기준 height 1칸 : 66px
            // 각 칸마다 구분점은 height / 3 지점에서 구분
            const basisHeight = DashboardGridStack.instance.getCellHeight();
            const heightCount = Math.floor(height / basisHeight) + (height % basisHeight > (basisHeight / 3) ? 1 : 0) - 1; // 최상단 title 빼고 Content 계산
            const paddingHeight = 32;
            const trHeight = 35;

            $.each(panelScope.find("table tr"), (i, e) => {
                const result = basisHeight * heightCount < paddingHeight + trHeight * (i + 1);

                if (result) {
                    $(e).addClass("d-none");
                } else {
                    $(e).removeClass("d-none");
                }
            });
        }
    }
};
GridStackScope.init();